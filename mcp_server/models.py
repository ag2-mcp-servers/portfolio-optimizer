# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:37:39+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, PositiveFloat, RootModel, confloat, conint


class AssetsCovarianceMatrixItem(RootModel[List[float]]):
    root: List[float]


class AssetsCovarianceMatrixEigenvectors(BaseModel):
    eigenvectorsRetained: Optional[conint(ge=1)] = Field(
        None,
        description='The number of eigenvectors to retain in the numerator of the absorption ratio, which must be lower than the number of assets; defaults to [1/5-th] the number of assets',
    )


class AssetsAnalysisAbsorptionRatioPostRequest(BaseModel):
    assets: conint(ge=1) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsCovarianceMatrixEigenvectors: Optional[AssetsCovarianceMatrixEigenvectors] = (
        None
    )


class AssetsAnalysisAbsorptionRatioPostResponse(BaseModel):
    assetsAbsorptionRatio: float = Field(
        ..., description='The absorption ratio of the universe of assets'
    )


class AssetsAnalysisTurbulenceIndexPostRequest(BaseModel):
    assets: conint(ge=1) = Field(..., description='The number of assets')
    assetsAverageReturns: List[float] = Field(
        ...,
        description='assetsAverageReturns[i] is the average return of asset i over an historical reference period',
        min_length=2,
    )
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j over an historical reference period',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the return of asset i over a period different from the historical reference period',
        min_length=2,
    )


class AssetsAnalysisTurbulenceIndexPostResponse(BaseModel):
    assetsTurbulenceIndex: float = Field(
        ..., description='the turbulence index of the universe of assets'
    )


class Asset(BaseModel):
    assetReturns: List[float] = Field(
        ...,
        description='assetReturns[t] is the return of the asset at the time t; all the assetReturns arrays must have the same length',
        min_length=2,
    )


class AssetsCorrelationMatrixPostRequest1(BaseModel):
    assets: List[Asset] = Field(..., min_length=2)


class AssetsCorrelationMatrixPostRequest2(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )


class AssetsCorrelationMatrixPostRequest(
    RootModel[
        Union[AssetsCorrelationMatrixPostRequest1, AssetsCorrelationMatrixPostRequest2]
    ]
):
    root: Union[
        AssetsCorrelationMatrixPostRequest1, AssetsCorrelationMatrixPostRequest2
    ]


class AssetsCorrelationMatrixItem(RootModel[List[float]]):
    root: List[float]


class AssetsCorrelationMatrixPostResponse(BaseModel):
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )


class AssetsGroupItem(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsCorrelationMatrixBoundsPostRequest(BaseModel):
    assets: conint(ge=2)
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )
    assetsGroup: List[AssetsGroupItem] = Field(
        ...,
        description='assetsGroup[k] is the indexes of the assets belonging to the assets group',
        min_length=2,
    )


class AssetsCorrelationMatrixLowerBound(RootModel[List[float]]):
    root: List[float]


class AssetsCorrelationMatrixUpperBound(RootModel[List[float]]):
    root: List[float]


class AssetsCorrelationMatrixBoundsPostResponse(BaseModel):
    assetsCorrelationMatrixLowerBounds: List[AssetsCorrelationMatrixLowerBound] = Field(
        ...,
        description='assetsCorrelationMatrixLowerBounds[i][j] is the lower bound of the correlation between the asset i and the asset j',
        min_length=2,
    )
    assetsCorrelationMatrixUpperBounds: List[AssetsCorrelationMatrixUpperBound] = Field(
        ...,
        description='assetsCorrelationMatrixUpperBounds[i][j] is the upper bound of the correlation between the asset i and the asset j',
        min_length=2,
    )


class DenoisingMethod(Enum):
    eigenvaluesClipping = 'eigenvaluesClipping'


class AssetsCorrelationMatrixDenoisedPostRequest(BaseModel):
    assets: conint(ge=2)
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )
    assetsCorrelationMatrixAspectRatio: PositiveFloat = Field(
        ...,
        description='The aspect ratio of the asset correlation matrix, defined as the number of assets divided by the number of asset returns per asset used to compute the asset correlation matrix',
    )
    denoisingMethod: Optional[DenoisingMethod] = Field(
        'eigenvaluesClipping',
        description='The method used to denoise the asset correlation matrix',
    )


class AssetsCorrelationMatrixDenoisedPostResponse(BaseModel):
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j; assetsCorrelationMatrix is possibly null in case the denoising method did not manage to denoise the provided asset correlation matrix',
        min_length=2,
    )


class DistanceMetric(Enum):
    euclidean = 'euclidean'
    correlationMatrix = 'correlationMatrix'
    bures = 'bures'


class ReferenceCorrelationMatrixItem(RootModel[List[float]]):
    root: List[float]


class AssetsCorrelationMatrixDistancePostRequest(BaseModel):
    assets: conint(ge=2)
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )
    distanceMetric: Optional[DistanceMetric] = Field(
        'euclidean',
        description='The distance metric to use to compute the distance between the asset correlation matrix and the reference correlation matrix',
    )
    referenceCorrelationMatrix: List[ReferenceCorrelationMatrixItem] = Field(
        ...,
        description='referenceCorrelationMatrix[i][j] is the reference correlation between the asset i and the asset j',
        min_length=2,
    )


class AssetsCorrelationMatrixDistancePostResponse(BaseModel):
    assetsCorrelationMatrixDistance: confloat(ge=0.0) = Field(
        ..., description='The computed distance between the two correlation matrices'
    )


class AssetsCorrelationMatrixEffectiveRankPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )


class AssetsCorrelationMatrixEffectiveRankItem(RootModel[List[float]]):
    root: List[float]


class AssetsCorrelationMatrixEffectiveRankPostResponse(BaseModel):
    assetsCorrelationMatrixEffectiveRank: List[
        AssetsCorrelationMatrixEffectiveRankItem
    ] = Field(
        ...,
        description='The effective rank of the asset correlation matrix',
        min_length=2,
    )


class AssetsCorrelationMatrixInformativenessPostRequest(BaseModel):
    assets: conint(ge=2)
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )
    distanceMetric: Optional[DistanceMetric] = Field(
        'euclidean',
        description='The distance metric to use to compute the informativeness of the asset correlation matrix',
    )


class AssetsCorrelationMatrixInformativenessPostResponse(BaseModel):
    assetsCorrelationMatrixInformativeness: confloat(ge=0.0) = Field(
        ..., description='The informativeness of the asset correlation matrix'
    )


class AssetsApproximateCorrelationMatrixItem(RootModel[List[float]]):
    root: List[float]


class AssetsCorrelationMatrixNearestPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsApproximateCorrelationMatrix: List[AssetsApproximateCorrelationMatrixItem] = (
        Field(
            ...,
            description='assetsApproximateCorrelationMatrix[i][i] is the approximate correlation between the asset i and the asset j',
            min_length=2,
        )
    )
    assetsFixedCorrelations: Optional[List[List[int]]] = Field(
        None,
        description='assetsFixedCorrelations[k] is the couple of indices (i,j) of the assets i and j for which to keep the approximate correlation assetsApproximateCorrelationMatrix[i][j] fixed',
    )


class AssetsCorrelationMatrixNearestPostResponse(BaseModel):
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )


class AssetsCorrelationMatrixRandomPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')


class AssetsCorrelationMatrixRandomPostResponse(BaseModel):
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )


class TargetEquicorrelationMatrix(Enum):
    minimumEquicorrelationMatrix = 'minimumEquicorrelationMatrix'
    zeroEquicorrelationMatrix = 'zeroEquicorrelationMatrix'
    maximumEquicorrelationMatrix = 'maximumEquicorrelationMatrix'


class AssetsCorrelationMatrixShrinkagePostRequest1(BaseModel):
    assets: conint(ge=2)
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )
    shrinkageFactor: confloat(ge=0.0, le=1.0) = Field(
        ..., description='The shrinkage factor'
    )
    targetEquicorrelationMatrix: TargetEquicorrelationMatrix = Field(
        ..., description='The shrinkage target correlation matrix'
    )


class TargetCorrelationMatrixItem(RootModel[List[float]]):
    root: List[float]


class AssetsCorrelationMatrixShrinkagePostRequest2(BaseModel):
    assets: conint(ge=2)
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )
    shrinkageFactor: confloat(ge=0.0, le=1.0)
    targetCorrelationMatrix: List[TargetCorrelationMatrixItem] = Field(
        ...,
        description='targetCorrelationMatrix[i][j] is the target correlation between the asset i and the asset j',
        min_length=2,
    )


class AssetsCorrelationMatrixShrinkagePostRequest(
    RootModel[
        Union[
            AssetsCorrelationMatrixShrinkagePostRequest1,
            AssetsCorrelationMatrixShrinkagePostRequest2,
        ]
    ]
):
    root: Union[
        AssetsCorrelationMatrixShrinkagePostRequest1,
        AssetsCorrelationMatrixShrinkagePostRequest2,
    ]


class AssetsCorrelationMatrixShrinkagePostResponse(BaseModel):
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )


class Asset1(BaseModel):
    assetHierarchicalClassification: List[Union[str, int]] = Field(
        ...,
        description='assetHierarchicalClassification[i] is the i+1-th level of the hierarchical classification of the asset, from the most generic classification to the most specific classification; all the assetHierarchicalClassification arrays must have the same length',
        max_length=4,
        min_length=1,
    )


class ClusteringMethod(Enum):
    singleLinkage = 'singleLinkage'
    averageLinkage = 'averageLinkage'
    completeLinkage = 'completeLinkage'
    wardLinkage = 'wardLinkage'


class AssetsCorrelationMatrixTheoryImpliedPostRequest(BaseModel):
    assets: List[Asset1] = Field(..., min_length=2)
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )
    clusteringMethod: Optional[ClusteringMethod] = Field(
        'averageLinkage', description='The hierarchical clustering method to use'
    )


class AssetsCorrelationMatrixTheoryImpliedPostResponse(BaseModel):
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )


class AssetsCorrelationMatrixValidationPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )


class Message(Enum):
    valid_correlation_matrix = 'valid correlation matrix'
    invalid_correlation_matrix___non_symmetric_matrix = (
        'invalid correlation matrix - non symmetric matrix'
    )
    invalid_correlation_matrix___non_positive_diagonal_elements = (
        'invalid correlation matrix - non positive diagonal elements'
    )
    invalid_correlation_matrix___non_positive_semi_definite_matrix = (
        'invalid correlation matrix - non positive semi-definite matrix'
    )


class AssetsCorrelationMatrixValidationPostResponse(BaseModel):
    message: Message = Field(
        ..., description='Indicates whether the matrix is a valid correlation matrix'
    )


class Asset2(BaseModel):
    assetReturns: List[float] = Field(
        ...,
        description='assetReturns[t] is the return of the asset at the time t; all the assetReturns arrays must have the same length',
        min_length=2,
    )


class AssetsCovarianceMatrixPostRequest1(BaseModel):
    assets: List[Asset2] = Field(..., min_length=2)


class AssetsVariance(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class AssetsCovarianceMatrixPostRequest2(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )
    assetsVariances: List[AssetsVariance] = Field(
        ...,
        description='assetsVariances[i] is the variance of the asset i',
        min_length=2,
    )


class AssetsVolatility(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class AssetsCovarianceMatrixPostRequest3(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )
    assetsVolatilities: List[AssetsVolatility] = Field(
        ...,
        description='assetsVolatilities[i] is the volatility of the asset i',
        min_length=2,
    )


class AssetsCovarianceMatrixPostRequest(
    RootModel[
        Union[
            AssetsCovarianceMatrixPostRequest1,
            AssetsCovarianceMatrixPostRequest2,
            AssetsCovarianceMatrixPostRequest3,
        ]
    ]
):
    root: Union[
        AssetsCovarianceMatrixPostRequest1,
        AssetsCovarianceMatrixPostRequest2,
        AssetsCovarianceMatrixPostRequest3,
    ]


class AssetsCovarianceMatrixPostResponse(BaseModel):
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )


class AssetsCovarianceMatrixEffectiveRankPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )


class AssetsCovarianceMatrixEffectiveRankItem(RootModel[List[float]]):
    root: List[float]


class AssetsCovarianceMatrixEffectiveRankPostResponse(BaseModel):
    assetsCovarianceMatrixEffectiveRank: List[
        AssetsCovarianceMatrixEffectiveRankItem
    ] = Field(
        ...,
        description='The effective rank of the asset covariance matrix',
        min_length=2,
    )


class AssetsCovarianceMatrixExponentiallyWeightedPostRequest(BaseModel):
    assets: List[Asset2] = Field(..., min_length=2)
    decayFactor: Optional[confloat(lt=1.0, gt=0.0)] = Field(
        0.94, description='The exponential decay factor'
    )


class AssetsCovarianceMatrixExponentiallyWeightedPostResponse(BaseModel):
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the sample covariance between the asset i returns and the asset j returns',
        min_length=2,
    )


class AssetsCovarianceMatrixValidationPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )


class Message1(Enum):
    valid_covariance_matrix = 'valid covariance matrix'
    invalid_covariance_matrix___non_symmetric_matrix = (
        'invalid covariance matrix - non symmetric matrix'
    )
    invalid_covariance_matrix___non_positive_diagonal_elements = (
        'invalid covariance matrix - non positive diagonal elements'
    )
    invalid_covariance_matrix___non_positive_semi_definite_matrix = (
        'invalid covariance matrix - non positive semi-definite matrix'
    )


class AssetsCovarianceMatrixValidationPostResponse(BaseModel):
    message: Message1 = Field(
        ..., description='Indicates whether the matrix is a valid covariance matrix'
    )


class Asset4(BaseModel):
    assetReturns: List[float] = Field(
        ...,
        description='assetReturns[t] is the return of the asset at the time t',
        min_length=4,
    )


class AssetsKurtosisPostRequest(BaseModel):
    assets: List[Asset4] = Field(..., min_length=1)


class Asset5(BaseModel):
    assetKurtosis: float = Field(..., description='The kurtosis of the asset')


class AssetsKurtosisPostResponse(BaseModel):
    assets: List[Asset5]


class AssetDividend(BaseModel):
    amount: PositiveFloat = Field(
        ..., description='The dividend amount distributed by the asset at the date t'
    )
    date: str = Field(
        ...,
        description='The date corresponding to the date t in format YYYY-MM-DD, which is usually the ex-distribution date',
    )


class AssetPrice(BaseModel):
    close: PositiveFloat = Field(
        ..., description='The unadjusted close price of the asset at the date t'
    )
    date: str = Field(
        ..., description='The date corresponding to the date t in format YYYY-MM-DD'
    )


class AssetSplit(BaseModel):
    date: str = Field(
        ...,
        description='The date corresponding to the date t in format YYYY-MM-DD, which is usually the ex-distribution date',
    )
    factor: PositiveFloat = Field(
        ..., description='The split factor of the asset at the date t'
    )


class Asset6(BaseModel):
    assetDividends: Optional[List[AssetDividend]] = Field(
        None,
        description='assetDividends[t] contains dividend information for the asset at the date t',
    )
    assetPrices: List[AssetPrice] = Field(
        ...,
        description='assetPrices[t] contains price information for the asset at the date t',
        min_length=1,
    )
    assetSplits: Optional[List[AssetSplit]] = Field(
        None,
        description='assetSplits[t] contains split information for the asset at the date t',
    )


class AssetsPricesAdjustedPostRequest(BaseModel):
    assets: List[Asset6] = Field(..., min_length=1)


class AssetAdjustedPrice(BaseModel):
    date: str = Field(
        ..., description='The date corresponding to the date t in format YYYY-MM-DD'
    )
    dividendAdjustedClose: Optional[PositiveFloat] = Field(
        None,
        description='The dividend(s) adjusted close price of the asset at the date t, only present if dividend(s) information are provided',
    )
    fullyAdjustedClose: PositiveFloat = Field(
        ...,
        description='The dividend(s) and split(s) adjusted close price of the asset at the date t',
    )
    splitAdjustedClose: Optional[PositiveFloat] = Field(
        None,
        description='The split(s) adjusted close price of the asset at the date t, only present if split(s) information are provided',
    )


class Asset7(BaseModel):
    assetAdjustedPrices: List[AssetAdjustedPrice] = Field(
        ...,
        description='assetAdjustedPrices[t] contains adjusted price information for the asset at the date t',
        min_length=1,
    )


class AssetsPricesAdjustedPostResponse(BaseModel):
    assets: List[Asset7]


class Asset8(BaseModel):
    assetDividends: Optional[List[AssetDividend]] = Field(
        None,
        description='assetDividends[t] contains dividend information for the asset at the date t',
    )
    assetPrices: List[AssetPrice] = Field(
        ...,
        description='assetPrices[t] contains price information for the asset at the date t',
        min_length=1,
    )
    assetSplits: Optional[List[AssetSplit]] = Field(
        None,
        description='assetSplits[t] contains split information for the asset at the date t',
    )


class AssetsPricesAdjustedForwardPostRequest(BaseModel):
    assets: List[Asset8] = Field(..., min_length=1)


class Asset9(BaseModel):
    assetAdjustedPrices: List[AssetAdjustedPrice] = Field(
        ...,
        description='assetAdjustedPrices[t] contains adjusted price information for the asset at the date t',
        min_length=1,
    )


class AssetsPricesAdjustedForwardPostResponse(BaseModel):
    assets: List[Asset9]


class AssetPrice2(RootModel[PositiveFloat]):
    root: PositiveFloat


class Asset10(BaseModel):
    assetPrices: List[AssetPrice2] = Field(
        ...,
        description='assetPrices[t] is the price of the asset at the time t',
        min_length=2,
    )


class AssetsReturnsPostRequest(BaseModel):
    assets: List[Asset10] = Field(..., min_length=1)


class Asset11(BaseModel):
    assetReturns: List[float] = Field(
        ...,
        description='assetReturns[t] is the arithmetic return of the asset from the time t-1 to the time t, in percentage',
    )


class AssetsReturnsPostResponse(BaseModel):
    assets: List[Asset11]


class Asset12(BaseModel):
    assetReturns: List[float] = Field(
        ...,
        description='assetReturns[t] is the return of the asset at the time t',
        min_length=1,
    )


class AssetsReturnsAveragePostRequest(BaseModel):
    assets: List[Asset12] = Field(..., min_length=1)


class Asset13(BaseModel):
    assetAverageReturn: float = Field(
        ..., description='The arithmetic average return of the asset'
    )


class AssetsReturnsAveragePostResponse(BaseModel):
    assets: List[Asset13]


class Asset14(BaseModel):
    assetReturns: List[float] = Field(
        ...,
        description='assetReturns[t] is the return of the asset over the time period t; all the assetReturns arrays must have the same length',
        min_length=2,
    )


class BootstrapMethod(Enum):
    iid = 'iid'
    circularBlock = 'circularBlock'
    stationaryBlock = 'stationaryBlock'


class AssetsReturnsSimulationBootstrapPostRequest(BaseModel):
    assets: List[Asset14] = Field(..., min_length=2)
    bootstrapAverageBlockLength: Optional[confloat(ge=1.0)] = Field(
        None,
        description="The average length of the blocks to use in case the bootstrap method is 'stationaryBlock', in time periods; if not provided, defaults to the inverse of 3.15 * the common length of the assetReturns arrays^1/3",
    )
    bootstrapBlockLength: Optional[conint(ge=2)] = Field(
        None,
        description="The length of the blocks to use in case the bootstrap method is 'circularBlock', in time periods; if not provided, defaults to [3.15 * the common length of the assetReturns arrays^1/3]",
    )
    bootstrapMethod: Optional[BootstrapMethod] = Field(
        'stationaryBlock', description='The bootstrap method to use'
    )
    simulations: Optional[conint(ge=1)] = Field(
        25, description='The number of simulations to perform'
    )
    simulationsLength: Optional[conint(ge=1)] = Field(
        None,
        description='The number of time period(s) to simulate per simulation; if not provided, defaults to the common length of the assetReturns arrays',
    )


class Asset15(BaseModel):
    assetReturns: List[float] = Field(
        ...,
        description='assetReturns[t] is the simulated return of the i-th asset for the t-th time period, in percentage',
    )


class Simulation(BaseModel):
    assets: List[Asset15] = Field(
        ..., description='assets[i] is the data for the i-th asset'
    )


class AssetsReturnsSimulationBootstrapPostResponse(BaseModel):
    simulations: List[Simulation]


class Asset16(BaseModel):
    assetReturns: List[float] = Field(
        ...,
        description='assetReturns[t] is the return of the asset at the time t',
        min_length=3,
    )


class AssetsSkewnessPostRequest(BaseModel):
    assets: List[Asset16] = Field(..., min_length=1)


class Asset17(BaseModel):
    assetSkewness: float = Field(..., description='The skewness of the asset')


class AssetsSkewnessPostResponse(BaseModel):
    assets: List[Asset17]


class Asset18(BaseModel):
    assetReturns: List[float] = Field(
        ...,
        description='assetReturns[t] is the return of the asset at the time t',
        min_length=2,
    )


class AssetsVariancePostRequest1(BaseModel):
    assets: List[Asset18] = Field(..., min_length=1)


class AssetsVariancePostRequest2(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )


class Asset19(BaseModel):
    assetVolatility: confloat(ge=0.0) = Field(..., description='The asset volatility')


class AssetsVariancePostRequest3(BaseModel):
    assets: List[Asset19] = Field(..., min_length=1)


class AssetsVariancePostRequest(
    RootModel[
        Union[
            AssetsVariancePostRequest1,
            AssetsVariancePostRequest2,
            AssetsVariancePostRequest3,
        ]
    ]
):
    root: Union[
        AssetsVariancePostRequest1,
        AssetsVariancePostRequest2,
        AssetsVariancePostRequest3,
    ]


class Asset20(BaseModel):
    assetVariance: confloat(ge=0.0) = Field(
        ..., description='The variance of the asset'
    )


class AssetsVariancePostResponse(BaseModel):
    assets: List[Asset20]


class Asset21(BaseModel):
    assetReturns: List[float] = Field(
        ...,
        description='assetReturns[t] is the return of the asset at the time t',
        min_length=2,
    )


class AssetsVolatilityPostRequest1(BaseModel):
    assets: List[Asset21] = Field(..., min_length=1)


class AssetsVolatilityPostRequest2(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )


class Asset22(BaseModel):
    assetVariance: confloat(ge=0.0) = Field(..., description='The asset variance')


class AssetsVolatilityPostRequest3(BaseModel):
    assets: List[Asset22] = Field(..., min_length=1)


class AssetsVolatilityPostRequest(
    RootModel[
        Union[
            AssetsVolatilityPostRequest1,
            AssetsVolatilityPostRequest2,
            AssetsVolatilityPostRequest3,
        ]
    ]
):
    root: Union[
        AssetsVolatilityPostRequest1,
        AssetsVolatilityPostRequest2,
        AssetsVolatilityPostRequest3,
    ]


class Asset23(BaseModel):
    assetVolatility: confloat(ge=0.0) = Field(
        ..., description='The volatility of the asset'
    )


class AssetsVolatilityPostResponse(BaseModel):
    assets: List[Asset23]


class Factor(BaseModel):
    factorReturns: List[float] = Field(
        ...,
        description='factorReturns[t] is the return of the factor at the time t; all the factorReturns arrays must have the same length',
        min_length=2,
    )


class FactorsResidualizationPostRequest(BaseModel):
    factors: List[Factor] = Field(..., min_length=2)
    residualizedFactor: conint(ge=1) = Field(
        ..., description='The index of the factor to residualize'
    )


class FactorsResidualizationPostResponse(BaseModel):
    residualizedFactorReturns: List[float] = Field(
        ...,
        description='residualizedFactorReturns[t] is the return of the residualized factor at the time t',
    )


class Portfolio(BaseModel):
    portfolioReturns: List[float] = Field(
        ...,
        description='portfolioReturns[t] is the return of the portfolio at the time t, all the portfolioReturns arrays must have the same length, equal to the length of the benchmarkReturns array',
        min_length=2,
    )


class PortfolioAnalysisAlphaPostRequest1(BaseModel):
    benchmarkReturns: List[float] = Field(
        ...,
        description='benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays',
        min_length=2,
    )
    portfolios: List[Portfolio] = Field(..., min_length=1)
    riskFreeRate: Optional[float] = Field(
        None, description='The risk free rate, assumed to be constant for any time t'
    )


class PortfolioAnalysisAlphaPostRequest2(BaseModel):
    benchmarkReturns: List[float] = Field(
        ...,
        description='benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays',
        min_length=2,
    )
    portfolios: List[Portfolio] = Field(..., min_length=1)
    riskFreeReturns: Optional[List[float]] = Field(
        None,
        description='riskFreeReturns[t] is the risk free return at the time t; the riskFreeReturns array must have the same length as all the portfolioReturns arrays',
        min_length=2,
    )


class PortfolioAnalysisAlphaPostRequest(
    RootModel[
        Union[PortfolioAnalysisAlphaPostRequest1, PortfolioAnalysisAlphaPostRequest2]
    ]
):
    root: Union[PortfolioAnalysisAlphaPostRequest1, PortfolioAnalysisAlphaPostRequest2]


class Portfolio2(BaseModel):
    portfolioAlpha: float = Field(
        ...,
        description="The portfolio Jensen's alpha, which correponds to the portfolio excess return adjusted for the systematic risk in the Capital Asset Pricing Model (CAPM)",
    )


class PortfolioAnalysisAlphaPostResponse(BaseModel):
    portfolios: List[Portfolio2] = Field(..., min_length=1)


class Portfolio3(BaseModel):
    portfolioReturns: List[float] = Field(
        ...,
        description='portfolioReturns[t] is the return of the portfolio at the time t, all the portfolioReturns arrays must have the same length, equal to the length of the benchmarkReturns array',
        min_length=2,
    )


class PortfolioAnalysisBetaPostRequest1(BaseModel):
    benchmarkReturns: List[float] = Field(
        ...,
        description='benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays',
        min_length=2,
    )
    portfolios: List[Portfolio3] = Field(..., min_length=1)
    riskFreeRate: Optional[float] = Field(
        None, description='The risk free rate, assumed to be constant for any time t'
    )


class PortfolioAnalysisBetaPostRequest2(BaseModel):
    benchmarkReturns: List[float] = Field(
        ...,
        description='benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays',
        min_length=2,
    )
    portfolios: List[Portfolio3] = Field(..., min_length=1)
    riskFreeReturns: Optional[List[float]] = Field(
        None,
        description='riskFreeReturns[t] is the risk free return at the time t; the riskFreeReturns array must have the same length as all the portfolioReturns arrays',
        min_length=2,
    )


class PortfolioAnalysisBetaPostRequest(
    RootModel[
        Union[PortfolioAnalysisBetaPostRequest1, PortfolioAnalysisBetaPostRequest2]
    ]
):
    root: Union[PortfolioAnalysisBetaPostRequest1, PortfolioAnalysisBetaPostRequest2]


class Portfolio5(BaseModel):
    portfolioBeta: float = Field(
        ...,
        description='The portfolio beta, which correponds to the portfolio systematic risk in the Capital Asset Pricing Model (CAPM)',
    )


class PortfolioAnalysisBetaPostResponse(BaseModel):
    portfolios: List[Portfolio5] = Field(..., min_length=1)


class PortfolioValue(RootModel[PositiveFloat]):
    root: PositiveFloat


class Portfolio6(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=2,
    )


class PortfolioAnalysisConditionalValueAtRiskPostRequest(BaseModel):
    alpha: confloat(lt=1.0, gt=0.0) = Field(
        ..., description='The conditional value at risk level'
    )
    portfolios: List[Portfolio6] = Field(..., min_length=1)


class Portfolio7(BaseModel):
    portfolioConditionalValueAtRisk: float = Field(
        ..., description='The conditional value at risk of the portfolio'
    )


class PortfolioAnalysisConditionalValueAtRiskPostResponse(BaseModel):
    portfolios: List[Portfolio7] = Field(..., min_length=1)


class AssetsGroup(RootModel[List[AssetsGroupItem]]):
    root: List[AssetsGroupItem] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k',
    )


class AssetsWeight(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class Portfolio8(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=1,
    )


class PortfolioAnalysisContributionsReturnPostRequest(BaseModel):
    assets: conint(ge=1) = Field(..., description='The number of assets')
    assetsGroups: Optional[List[AssetsGroup]] = Field(None, min_length=1)
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    portfolios: List[Portfolio8] = Field(..., min_length=1)


class Portfolio9(BaseModel):
    assetsGroupsReturnContributions: Optional[List[float]] = Field(
        None,
        description='assetsGroupsReturnContributions[k] is the return contribution of the group of assets k to the return of the portfolio',
        min_length=1,
    )
    assetsReturnContributions: List[float] = Field(
        ...,
        description='assetsReturnContributions[i] is the return contribution of the asset i to the return of the portfolio',
        min_length=1,
    )


class PortfolioAnalysisContributionsReturnPostResponse(BaseModel):
    portfolios: List[Portfolio9]


class AssetsGroup1Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup1(RootModel[List[AssetsGroup1Item]]):
    root: List[AssetsGroup1Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k',
    )


class Portfolio10(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=1,
    )


class PortfolioAnalysisContributionsRiskPostRequest(BaseModel):
    assets: conint(ge=1) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsGroups: Optional[List[AssetsGroup1]] = Field(None, min_length=1)
    portfolios: List[Portfolio10] = Field(..., min_length=1)


class Portfolio11(BaseModel):
    assetsGroupsRiskContributions: Optional[List[float]] = Field(
        None,
        description='assetsGroupsRiskContributions[k] is the risk contribution of the group of assets k to the risk of the portfolio',
        min_length=1,
    )
    assetsRiskContributions: List[float] = Field(
        ...,
        description='assetsRiskContributions[i] is the risk contribution of the asset i to the risk of the portfolio',
        min_length=1,
    )


class PortfolioAnalysisContributionsRiskPostResponse(BaseModel):
    portfolios: List[Portfolio11]


class Portfolio12(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=1,
    )


class PortfolioAnalysisCorrelationSpectrumPostRequest1(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    portfolios: List[Portfolio12] = Field(..., min_length=1)


class Asset24(BaseModel):
    assetPrices: List[AssetPrice2] = Field(
        ...,
        description='assetPrices[t] is the price of the asset at the time t; all the assetPrices arrays must have the same length',
        min_length=2,
    )


class Portfolio13(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t; all the portfolioValues arrays must have the same length, equal to the common length of the assetPrices arrays',
        min_length=2,
    )


class PortfolioAnalysisCorrelationSpectrumPostRequest2(BaseModel):
    assets: List[Asset24] = Field(..., min_length=1)
    portfolios: List[Portfolio13] = Field(..., min_length=1)


class PortfolioAnalysisCorrelationSpectrumPostRequest(
    RootModel[
        Union[
            PortfolioAnalysisCorrelationSpectrumPostRequest1,
            PortfolioAnalysisCorrelationSpectrumPostRequest2,
        ]
    ]
):
    root: Union[
        PortfolioAnalysisCorrelationSpectrumPostRequest1,
        PortfolioAnalysisCorrelationSpectrumPostRequest2,
    ]


class PortfolioCorrelationSpectrumItem(RootModel[confloat(ge=-1.0, le=1.0)]):
    root: confloat(ge=-1.0, le=1.0)


class Portfolio14(BaseModel):
    portfolioCorrelationSpectrum: List[PortfolioCorrelationSpectrumItem] = Field(
        ..., description='The correlation spectrum of the portfolio', min_length=2
    )


class PortfolioAnalysisCorrelationSpectrumPostResponse(BaseModel):
    portfolios: List[Portfolio14]


class Portfolio15(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=1,
    )


class PortfolioAnalysisDiversificationRatioPostRequest1(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    portfolios: List[Portfolio15] = Field(..., min_length=1)


class Asset25(BaseModel):
    assetPrices: List[AssetPrice2] = Field(
        ...,
        description='assetPrices[t] is the price of the asset at the time t; all the assetPrices arrays must have the same length',
        min_length=2,
    )


class Portfolio16(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t; all the portfolioValues arrays must have the same length, equal to the common length of the assetPrices arrays',
        min_length=2,
    )


class PortfolioAnalysisDiversificationRatioPostRequest2(BaseModel):
    assets: List[Asset25] = Field(..., min_length=1)
    portfolios: List[Portfolio16] = Field(..., min_length=1)


class PortfolioAnalysisDiversificationRatioPostRequest(
    RootModel[
        Union[
            PortfolioAnalysisDiversificationRatioPostRequest1,
            PortfolioAnalysisDiversificationRatioPostRequest2,
        ]
    ]
):
    root: Union[
        PortfolioAnalysisDiversificationRatioPostRequest1,
        PortfolioAnalysisDiversificationRatioPostRequest2,
    ]


class Portfolio17(BaseModel):
    portfolioDiversificationRatio: confloat(ge=0.0) = Field(
        ..., description='The diversification ratio of the portfolio'
    )


class PortfolioAnalysisDiversificationRatioPostResponse(BaseModel):
    portfolios: List[Portfolio17]


class Portfolio18(BaseModel):
    portfolioValues: List[PositiveFloat] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
    )


class PortfolioAnalysisDrawdownsPostRequest(BaseModel):
    portfolios: List[Portfolio18] = Field(..., min_length=1)


class PortfolioDrawdown(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class PortfolioWorstDrawdown(BaseModel):
    drawdownBottom: conint(ge=0)
    drawdownDepth: confloat(ge=0.0)
    drawdownEnd: conint(ge=0)
    drawdownStart: conint(ge=0)


class Portfolio19(BaseModel):
    portfolioDrawdowns: List[PortfolioDrawdown] = Field(
        ...,
        description='portfolioDrawdowns[t] is the value of the drawdown function at the time t',
        min_length=1,
    )
    portfolioWorstDrawdowns: List[PortfolioWorstDrawdown] = Field(..., min_length=1)


class PortfolioAnalysisDrawdownsPostResponse(BaseModel):
    portfolios: List[Portfolio19]


class FactorsExtractionMethod(Enum):
    principalComponentAnalysis = 'principalComponentAnalysis'
    exactMinimumLinearTorsion = 'exactMinimumLinearTorsion'
    approximateMinimumLinearTorsion = 'approximateMinimumLinearTorsion'


class Portfolio20(BaseModel):
    assetsWeights: List[float] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class PortfolioAnalysisEffectiveNumberOfBetsPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    factorsExtractionMethod: Optional[FactorsExtractionMethod] = Field(
        'exactMinimumLinearTorsion',
        description='The method used to extract the uncorrelated risk factors from the asset covariance matrix',
    )
    portfolios: List[Portfolio20] = Field(..., min_length=1)


class Portfolio21(BaseModel):
    portfolioEffectiveNumberOfBets: confloat(ge=0.0) = Field(
        ..., description='The effective number of bets of the portfolio'
    )


class PortfolioAnalysisEffectiveNumberOfBetsPostResponse(BaseModel):
    portfolios: List[Portfolio21]


class Factor1(BaseModel):
    factorReturns: List[float] = Field(
        ...,
        description='factorReturns[t] is the return of the factor at the time t; all the factorReturns arrays must have the same length, equal to the common length of the portfolioReturns arrays',
        min_length=2,
    )


class Portfolio22(BaseModel):
    portfolioReturns: List[float] = Field(
        ...,
        description='portfolioReturns[t] is the return of the portfolio at the time t, all the portfolioReturns arrays must have the same length, equal to the common length of the factorReturns arrays',
        min_length=2,
    )


class PortfolioAnalysisFactorsExposuresPostRequest(BaseModel):
    factors: Optional[List[Factor1]] = Field(None, min_length=1)
    portfolios: List[Portfolio22] = Field(..., min_length=1)


class Portfolio23(BaseModel):
    portfolioAlpha: float = Field(
        ...,
        description='The portfolio alpha, which correponds to the portion of the portfolio returns that cannot be explained by the portfolio factor exposures',
    )
    portfolioBetas: List[float] = Field(
        ...,
        description='The portfolio betas, which correspond to the portfolio factor exposures',
        min_length=1,
    )
    portfolioRSquared: float = Field(
        ...,
        description='The portfolio R^2, which indicates how much of the variability in the portfolio returns can be explained by the portfolio factor exposures; generally, the higher the R^2 the better the portfolio factor exposures explain the portfolio returns',
    )


class PortfolioAnalysisFactorsExposuresPostResponse(BaseModel):
    portfolios: List[Portfolio23] = Field(..., min_length=1)


class AssetsGroup2Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup2(RootModel[List[AssetsGroup2Item]]):
    root: List[AssetsGroup2Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class AssetsGroupsMatrixItem(RootModel[List[float]]):
    root: List[float]


class Constraints(BaseModel):
    assetsGroups: Optional[List[AssetsGroup2]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioAnalysisMeanVarianceEfficientFrontierPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints] = None
    portfolios: Optional[conint(ge=2)] = Field(
        25,
        description='The number of portfolios to compute on the mean-variance efficient frontier',
    )


class Portfolio24(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )
    portfolioReturn: float = Field(
        ..., description='The arithmetic return of the portfolio'
    )
    portfolioVolatility: confloat(ge=0.0) = Field(
        ..., description='The volatility of the portfolio'
    )


class PortfolioAnalysisMeanVarianceEfficientFrontierPostResponse(BaseModel):
    portfolios: List[Portfolio24] = Field(..., min_length=1)


class AssetsGroup3Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup3(RootModel[List[AssetsGroup3Item]]):
    root: List[AssetsGroup3Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints1(BaseModel):
    assetsGroups: Optional[List[AssetsGroup3]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioAnalysisMeanVarianceMinimumVarianceFrontierPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints1] = None
    portfolios: Optional[conint(ge=2)] = Field(
        25,
        description='The number of portfolios to compute on the mean-variance minimum variance frontier',
    )


class Portfolio25(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )
    portfolioReturn: float = Field(
        ..., description='The arithmetic return of the portfolio'
    )
    portfolioVolatility: confloat(ge=0.0) = Field(
        ..., description='The volatility of the portfolio'
    )


class PortfolioAnalysisMeanVarianceMinimumVarianceFrontierPostResponse(BaseModel):
    portfolios: List[Portfolio25] = Field(..., min_length=1)


class Portfolio26(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=1,
    )


class PortfolioAnalysisReturnPostRequest1(BaseModel):
    assets: conint(ge=1) = Field(..., description='The number of assets')
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    portfolios: List[Portfolio26] = Field(..., min_length=1)


class Portfolio27(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=2,
    )


class PortfolioAnalysisReturnPostRequest2(BaseModel):
    portfolios: List[Portfolio27] = Field(..., min_length=1)


class PortfolioAnalysisReturnPostRequest(
    RootModel[
        Union[PortfolioAnalysisReturnPostRequest1, PortfolioAnalysisReturnPostRequest2]
    ]
):
    root: Union[
        PortfolioAnalysisReturnPostRequest1, PortfolioAnalysisReturnPostRequest2
    ]


class Portfolio28(BaseModel):
    portfolioReturn: float = Field(
        ..., description='The arithmetic return of the portfolio'
    )


class PortfolioAnalysisReturnPostResponse(BaseModel):
    portfolios: List[Portfolio28] = Field(..., min_length=1)


class Portfolio29(BaseModel):
    portfolioValues: List[PositiveFloat] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
    )


class PortfolioAnalysisReturnsAveragePostRequest(BaseModel):
    portfolios: List[Portfolio29] = Field(..., min_length=1)


class Portfolio30(BaseModel):
    portfolioAverageReturn: float = Field(
        ..., description='The arithmetic average return of the portfolio'
    )


class PortfolioAnalysisReturnsAveragePostResponse(BaseModel):
    portfolios: List[Portfolio30]


class Portfolio31(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class PortfolioAnalysisSharpeRatioPostRequest1(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=2,
    )
    portfolios: List[Portfolio31] = Field(..., min_length=1)
    riskFreeRate: float = Field(..., description='The risk free rate')


class Portfolio32(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=2,
    )


class PortfolioAnalysisSharpeRatioPostRequest2(BaseModel):
    portfolios: List[Portfolio32] = Field(..., min_length=1)
    riskFreeRate: float = Field(..., description='The risk free rate')


class PortfolioAnalysisSharpeRatioPostRequest(
    RootModel[
        Union[
            PortfolioAnalysisSharpeRatioPostRequest1,
            PortfolioAnalysisSharpeRatioPostRequest2,
        ]
    ]
):
    root: Union[
        PortfolioAnalysisSharpeRatioPostRequest1,
        PortfolioAnalysisSharpeRatioPostRequest2,
    ]


class Portfolio33(BaseModel):
    portfolioSharpeRatio: float = Field(
        ..., description='The Sharpe ratio of the portfolio'
    )


class PortfolioAnalysisSharpeRatioPostResponse(BaseModel):
    portfolios: List[Portfolio33] = Field(..., min_length=1)


class Portfolio34(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=4,
    )


class PortfolioAnalysisSharpeRatioBiasAdjustedPostRequest(BaseModel):
    portfolios: List[Portfolio34] = Field(..., min_length=1)
    riskFreeRate: float = Field(..., description='The risk free rate')


class Portfolio35(BaseModel):
    portfolioBiasAdjustedSharpeRatio: float = Field(
        ..., description='The bias-adjusted Sharpe ratio of the portfolio'
    )


class PortfolioAnalysisSharpeRatioBiasAdjustedPostResponse(BaseModel):
    portfolios: List[Portfolio35] = Field(..., min_length=1)


class ConfidenceIntervalType(Enum):
    twoSided = 'twoSided'
    lowerOneSided = 'lowerOneSided'
    upperOneSided = 'upperOneSided'


class Portfolio36(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=4,
    )


class PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest(BaseModel):
    confidenceIntervalType: Optional[ConfidenceIntervalType] = Field(
        'twoSided', description='The type of confidence interval to build'
    )
    confidenceLevel: Optional[confloat(lt=1.0, gt=0.0)] = Field(
        0.95,
        description='The confidence level of the confidence interval to build, in percentage',
    )
    portfolios: List[Portfolio36] = Field(..., min_length=1)
    riskFreeRate: float = Field(..., description='The risk free rate')


class Portfolio37(BaseModel):
    portfolioSharpeRatioConfidenceInterval: List[float] = Field(
        ...,
        description='portfolioSharpeRatioConfidenceInterval[0] (resp. portfolioSharpeRatioConfidenceInterval[1]) is the lower (resp. upper) bound of the built confidence interval, possibly equal to null in case of a negative infinite (resp. positive infinite) bound',
        max_length=2,
        min_length=2,
    )


class PortfolioAnalysisSharpeRatioConfidenceIntervalPostResponse(BaseModel):
    portfolios: List[Portfolio37] = Field(..., min_length=1)


class Portfolio38(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=4,
    )


class PortfolioAnalysisSharpeRatioProbabilisticPostRequest1(BaseModel):
    benchmarkSharpeRatio: float = Field(
        ...,
        description='The Sharpe ratio of the benchmark, in the same sampling frequency as the sampling frequency of the portfolio values',
    )
    portfolios: List[Portfolio38] = Field(..., min_length=1)
    riskFreeRate: float = Field(..., description='The risk free rate')


class BenchmarkValue(RootModel[PositiveFloat]):
    root: PositiveFloat


class Portfolio39(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t; all the portfolioValues arrays must have the same length as the benchmarkValues array',
        min_length=4,
    )


class PortfolioAnalysisSharpeRatioProbabilisticPostRequest2(BaseModel):
    benchmarkValues: List[BenchmarkValue] = Field(
        ...,
        description='benchmarkValues[t] is the value of the benchmark at the time t; the benchmarkValues array must have the same length as all the portfolioValues arrays',
        min_length=4,
    )
    portfolios: List[Portfolio39] = Field(..., min_length=1)
    riskFreeRate: float = Field(..., description='The risk free rate')


class PortfolioAnalysisSharpeRatioProbabilisticPostRequest(
    RootModel[
        Union[
            PortfolioAnalysisSharpeRatioProbabilisticPostRequest1,
            PortfolioAnalysisSharpeRatioProbabilisticPostRequest2,
        ]
    ]
):
    root: Union[
        PortfolioAnalysisSharpeRatioProbabilisticPostRequest1,
        PortfolioAnalysisSharpeRatioProbabilisticPostRequest2,
    ]


class Portfolio40(BaseModel):
    portfolioProbabilisticSharpeRatio: float = Field(
        ...,
        description='The probabilistic Sharpe ratio of the portfolio, in percentage',
    )


class PortfolioAnalysisSharpeRatioProbabilisticPostResponse(BaseModel):
    portfolios: List[Portfolio40] = Field(..., min_length=1)


class Portfolio41(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=4,
    )


class PortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthPostRequest1(
    BaseModel
):
    benchmarkSharpeRatio: float = Field(
        ...,
        description='The Sharpe ratio of the benchmark, in the same sampling frequency as the sampling frequency of the portfolio values',
    )
    confidenceLevel: Optional[confloat(lt=1.0, gt=0.0)] = Field(
        0.95,
        description='The confidence level of the minimum track record length, in percentage',
    )
    portfolios: List[Portfolio41] = Field(..., min_length=1)
    riskFreeRate: float = Field(..., description='The risk free rate')


class Portfolio42(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=4,
    )


class PortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthPostRequest2(
    BaseModel
):
    benchmarkValues: Optional[List[BenchmarkValue]] = Field(
        None,
        description='benchmarkValues[t] is the value of the benchmark at the time t; the benchmarkValues array must have the same length as all the portfolioValues arrays',
        min_length=4,
    )
    confidenceLevel: Optional[confloat(lt=1.0, gt=0.0)] = Field(
        0.95,
        description='The confidence level of the minimum track record length, in percentage',
    )
    portfolios: List[Portfolio42] = Field(..., min_length=1)
    riskFreeRate: float = Field(..., description='The risk free rate')


class PortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthPostRequest(
    RootModel[
        Union[
            PortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthPostRequest1,
            PortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthPostRequest2,
        ]
    ]
):
    root: Union[
        PortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthPostRequest1,
        PortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthPostRequest2,
    ]


class Portfolio43(BaseModel):
    portfolioSharpeRatioMinimumTrackRecordLength: float = Field(
        ...,
        description='The minimum track record length of the portfolio, in number of required arithmetic returns, possibly equal to null in case the minimum track record length does not exist',
    )


class PortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthPostResponse(
    BaseModel
):
    portfolios: List[Portfolio43] = Field(..., min_length=1)


class Portfolio44(BaseModel):
    portfolioReturns: List[float] = Field(
        ...,
        description='portfolioReturns[t] is the return of the portfolio at the time t, the portfolioReturns must have the same length as the benchmarkReturns array',
        min_length=2,
    )


class PortfolioAnalysisTrackingErrorPostRequest(BaseModel):
    benchmarkReturns: List[float] = Field(
        ...,
        description='benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays',
        min_length=2,
    )
    portfolios: List[Portfolio44] = Field(..., min_length=1)


class Portfolio45(BaseModel):
    portfolioTrackingError: confloat(ge=0.0) = Field(
        ..., description='The tracking error of the portfolio'
    )


class PortfolioAnalysisTrackingErrorPostResponse(BaseModel):
    portfolios: List[Portfolio45] = Field(..., min_length=1)


class Portfolio46(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=2,
    )


class PortfolioAnalysisUlcerIndexPostRequest(BaseModel):
    portfolios: List[Portfolio46] = Field(..., min_length=1)
    riskFreeRate: float = Field(..., description='The risk free rate')


class Portfolio47(BaseModel):
    portfolioUlcerIndex: float = Field(
        ..., description='The Ulcer Index of the portfolio'
    )


class PortfolioAnalysisUlcerIndexPostResponse(BaseModel):
    portfolios: List[Portfolio47]


class Portfolio48(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=2,
    )


class PortfolioAnalysisUlcerPerformanceIndexPostRequest(BaseModel):
    portfolios: List[Portfolio48] = Field(..., min_length=1)
    riskFreeRate: float = Field(..., description='The risk free rate')


class Portfolio49(BaseModel):
    portfolioUlcerPerformanceIndex: float = Field(
        ..., description='The Ulcer Performance Index of the portfolio'
    )


class PortfolioAnalysisUlcerPerformanceIndexPostResponse(BaseModel):
    portfolios: List[Portfolio49]


class Portfolio50(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=2,
    )


class PortfolioAnalysisValueAtRiskPostRequest(BaseModel):
    alpha: confloat(lt=1.0, gt=0.0) = Field(..., description='The value at risk level')
    portfolios: List[Portfolio50] = Field(..., min_length=1)


class Portfolio51(BaseModel):
    portfolioValueAtRisk: float = Field(
        ..., description='The value at risk of the portfolio'
    )


class PortfolioAnalysisValueAtRiskPostResponse(BaseModel):
    portfolios: List[Portfolio51] = Field(..., min_length=1)


class Portfolio52(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class PortfolioAnalysisVolatilityPostRequest1(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    portfolios: List[Portfolio52] = Field(..., min_length=1)


class Portfolio53(BaseModel):
    portfolioValues: List[PortfolioValue] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
        min_length=2,
    )


class PortfolioAnalysisVolatilityPostRequest2(BaseModel):
    portfolios: List[Portfolio53] = Field(..., min_length=1)


class PortfolioAnalysisVolatilityPostRequest(
    RootModel[
        Union[
            PortfolioAnalysisVolatilityPostRequest1,
            PortfolioAnalysisVolatilityPostRequest2,
        ]
    ]
):
    root: Union[
        PortfolioAnalysisVolatilityPostRequest1, PortfolioAnalysisVolatilityPostRequest2
    ]


class Portfolio54(BaseModel):
    portfolioVolatility: confloat(ge=0.0) = Field(
        ..., description='The volatility of the portfolio'
    )


class PortfolioAnalysisVolatilityPostResponse(BaseModel):
    portfolios: List[Portfolio54] = Field(..., min_length=1)


class AssetsGroup4Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup4(RootModel[List[AssetsGroup4Item]]):
    root: List[AssetsGroup4Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; requires either assetsGroupsWeights or maximumAssetsGroupsWeights to be present',
    )


class AssetsGroupsWeight(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class AssetsMinimumNotionalValue(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class AssetsMinimumPosition(RootModel[PositiveFloat]):
    root: PositiveFloat


class AssetsPrice(RootModel[PositiveFloat]):
    root: PositiveFloat


class AssetsSizeLot(RootModel[PositiveFloat]):
    root: PositiveFloat


class MaximumAssetsGroupsWeight(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class PortfolioConstructionInvestablePostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsGroups: Optional[List[AssetsGroup4]] = Field(None, min_length=1)
    assetsGroupsWeights: Optional[List[AssetsGroupsWeight]] = Field(
        None,
        description='assetsGroupsWeights[i] is the desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present',
        min_length=1,
    )
    assetsMinimumNotionalValues: Optional[List[AssetsMinimumNotionalValue]] = Field(
        None,
        description='assetsMinimumNotionalValues[i] is the minimum monetary value that the position in the asset i is required to represent when the asset i is included in the portfolio',
        min_length=2,
    )
    assetsMinimumPositions: Optional[List[AssetsMinimumPosition]] = Field(
        None,
        description='assetsMinimumPositions[i] is the minimum number of shares of the asset i that is required to purchase when the asset i is included in the portfolio (usual values are the same as for assetsSizeLots)',
        min_length=2,
    )
    assetsPrices: List[AssetsPrice] = Field(
        ..., description='assetsPrices[i] is the price of the asset i', min_length=2
    )
    assetsSizeLots: Optional[List[AssetsSizeLot]] = Field(
        None,
        description='assetsSizeLots[i] is the number of shares by which it is required to purchase the asset i (usual values are 1 if the asset needs to be purchased share by share, 100 if the asset needs to be purchased by an integer multiple of 100 shares, and 1/1000000 - e.g. for Robinhood broker - if the asset can be purchased by fractional shares)',
        min_length=2,
    )
    assetsWeights: Optional[List[AssetsWeight]] = Field(
        None,
        description='assetsWeights[i] is the desired weight of the asset i in the portfolio, in percentage (can be null to indicate no specific desire)',
        min_length=2,
    )
    maximumAssetsGroupsWeights: Optional[List[MaximumAssetsGroupsWeight]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present',
        min_length=1,
    )
    portfolioValue: PositiveFloat = Field(
        ..., description='The monetary value of the portfolio'
    )


class AssetsPosition(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class PortfolioConstructionInvestablePostResponse(BaseModel):
    assetsPositions: List[AssetsPosition] = Field(
        ...,
        description='assetsPositions[i] is the number of shares of the asset i in the portfolio',
        min_length=2,
    )
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class Asset26(BaseModel):
    assetReturns: List[float] = Field(
        ...,
        description='assetReturns[t] is the return of the asset at the time t; all the assetReturns arrays must have the same length',
        min_length=2,
    )


class AssetsGroup5Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup5(RootModel[List[AssetsGroup5Item]]):
    root: List[AssetsGroup5Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints2(BaseModel):
    assetsGroups: Optional[List[AssetsGroup5]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioConstructionMimickingPostRequest(BaseModel):
    assets: List[Asset26] = Field(..., min_length=2)
    benchmarkReturns: List[float] = Field(
        ...,
        description='benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the assetReturns arrays',
        min_length=2,
    )
    constraints: Optional[Constraints2] = None


class PortfolioConstructionMimickingPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class Constraints3(BaseModel):
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioConstructionRandomPostRequest(BaseModel):
    assets: conint(ge=1) = Field(..., description='The number of assets')
    constraints: Optional[Constraints3] = None
    portfolios: Optional[conint(ge=1)] = Field(
        25, description='The number of portfolios to construct'
    )


class Portfolio55(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=1,
    )


class PortfolioConstructionRandomPostResponse(BaseModel):
    portfolios: List[Portfolio55] = Field(..., min_length=1)


class Constraints4(BaseModel):
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )


class PortfolioOptimizationEqualRiskContributionsPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    constraints: Optional[Constraints4] = None


class PortfolioOptimizationEqualRiskContributionsPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class PortfolioOptimizationEqualSharpeRatioContributionsPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=2,
    )
    riskFreeRate: float = Field(..., description='The risk free rate')


class PortfolioOptimizationEqualSharpeRatioContributionsPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class PortfolioOptimizationEqualVolatilityWeightedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsVolatilities: List[AssetsVolatility] = Field(
        ...,
        description='assetsVolatilities[i] is the volatility of the asset i',
        min_length=2,
    )


class PortfolioOptimizationEqualVolatilityWeightedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class PortfolioOptimizationEqualWeightedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')


class PortfolioOptimizationEqualWeightedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class ClusteringOrdering(Enum):
    r_hclust = 'r-hclust'
    optimal = 'optimal'


class Constraints5(BaseModel):
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationHierarchicalRiskParityPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    clusteringMethod: Optional[ClusteringMethod] = Field(
        'singleLinkage', description='The hierarchical clustering method to use'
    )
    clusteringOrdering: Optional[ClusteringOrdering] = Field(
        'r-hclust',
        description='The order to impose on the hierarchical clustering tree leaves',
    )
    constraints: Optional[Constraints5] = None


class PortfolioOptimizationHierarchicalRiskParityPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AcrossClusterAllocationMethod(Enum):
    equalWeighting = 'equalWeighting'
    inverseVolatility = 'inverseVolatility'
    inverseVariance = 'inverseVariance'


class WithinClusterAllocationMethod(Enum):
    equalWeighting = 'equalWeighting'
    inverseVolatility = 'inverseVolatility'
    inverseVariance = 'inverseVariance'


class PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest(BaseModel):
    acrossClusterAllocationMethod: Optional[AcrossClusterAllocationMethod] = Field(
        'equalWeighting', description='The allocation method to use across clusters'
    )
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    clusteringMethod: Optional[ClusteringMethod] = Field(
        'wardLinkage', description='The hierarchical clustering method to use'
    )
    clusteringOrdering: Optional[ClusteringOrdering] = Field(
        'r-hclust',
        description='The order to impose on the hierarchical clustering tree leaves',
    )
    clusters: Optional[conint(ge=1)] = Field(
        None,
        description='The number of clusters to use in the hierarchical clustering tree; if not provided, the number of clusters to use is computed using the gap statistic method, as described in the first reference',
    )
    constraints: Optional[Constraints5] = None
    withinClusterAllocationMethod: Optional[WithinClusterAllocationMethod] = Field(
        'equalWeighting', description='The allocation method to use within clusters'
    )


class PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class PortfolioOptimizationInverseVarianceWeightedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsVariances: List[AssetsVariance] = Field(
        ...,
        description='assetsVariances[i] is the variance of the asset i',
        min_length=2,
    )


class PortfolioOptimizationInverseVarianceWeightedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class PortfolioOptimizationInverseVolatilityWeightedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsVolatilities: List[AssetsVolatility] = Field(
        ...,
        description='assetsVolatilities[i] is the volatility of the asset i',
        min_length=2,
    )


class PortfolioOptimizationInverseVolatilityWeightedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsMarketCapitalization(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class PortfolioOptimizationMarketCapitalizationWeightedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsMarketCapitalizations: List[AssetsMarketCapitalization] = Field(
        ...,
        description='assetsMarketCapitalizations[i] is the market capitalization of the asset i',
        min_length=2,
    )


class PortfolioOptimizationMarketCapitalizationWeightedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup6Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup6(RootModel[List[AssetsGroup6Item]]):
    root: List[AssetsGroup6Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints7(BaseModel):
    assetsGroups: Optional[List[AssetsGroup6]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMaximumDecorrelationPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: Optional[List[float]] = Field(
        None,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints7] = None


class PortfolioOptimizationMaximumDecorrelationPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup7Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup7(RootModel[List[AssetsGroup7Item]]):
    root: List[AssetsGroup7Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints8(BaseModel):
    assetsGroups: Optional[List[AssetsGroup7]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMaximumReturnPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: Optional[List[AssetsCovarianceMatrixItem]] = Field(
        None,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints8] = None


class PortfolioOptimizationMaximumReturnPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup8Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup8(RootModel[List[AssetsGroup8Item]]):
    root: List[AssetsGroup8Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints9(BaseModel):
    assetsGroups: Optional[List[AssetsGroup8]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    deltaReturn: Optional[confloat(ge=0.0)] = Field(
        0.1,
        description='The relative tolerance over the maximum return portfolio return',
    )
    deltaVolatility: Optional[confloat(ge=0.0)] = Field(
        0.1,
        description='The relative tolerance over the maximum return portfolio volatility, if applicable',
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMaximumReturnDiversifiedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: Optional[List[AssetsCovarianceMatrixItem]] = Field(
        None,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints9] = None


class PortfolioOptimizationMaximumReturnDiversifiedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup9Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup9(RootModel[List[AssetsGroup9Item]]):
    root: List[AssetsGroup9Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints10(BaseModel):
    assetsGroups: Optional[List[AssetsGroup9]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class SubsetPortfoliosAggregationMethod(Enum):
    average = 'average'
    median = 'median'


class SubsetPortfoliosEnumerationMethod(Enum):
    complete = 'complete'
    randomSampling = 'randomSampling'


class PortfolioOptimizationMaximumReturnSubsetResamplingBasedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: Optional[List[AssetsCovarianceMatrixItem]] = Field(
        None,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints10] = None
    subsetPortfolios: Optional[conint(ge=1)] = Field(
        128,
        description='The number of subset portfolios to compute; only applicable if the enumeration method for the subset portfolios is random sampling',
    )
    subsetPortfoliosAggregationMethod: Optional[SubsetPortfoliosAggregationMethod] = (
        Field('average', description='The method to aggregate the subset portfolios')
    )
    subsetPortfoliosEnumerationMethod: Optional[SubsetPortfoliosEnumerationMethod] = (
        Field(
            'randomSampling',
            description='The method to enumerate the subset portfolios',
        )
    )
    subsetSize: Optional[conint(ge=2)] = Field(
        None,
        description='The number of assets to include in each subset portfolio; defaults to a value of order the square root of the total number of assets',
    )


class PortfolioOptimizationMaximumReturnSubsetResamplingBasedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup10Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup10(RootModel[List[AssetsGroup10Item]]):
    root: List[AssetsGroup10Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints11(BaseModel):
    assetsGroups: Optional[List[AssetsGroup10]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMaximumSharpeRatioPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints11] = None
    riskFreeRate: float = Field(..., description='The risk free rate')


class PortfolioOptimizationMaximumSharpeRatioPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup11Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup11(RootModel[List[AssetsGroup11Item]]):
    root: List[AssetsGroup11Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints12(BaseModel):
    assetsGroups: Optional[List[AssetsGroup11]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    deltaReturn: Optional[confloat(ge=0.0)] = Field(
        0.1,
        description='The relative tolerance over the maximum Sharpe ratio portfolio return',
    )
    deltaVolatility: Optional[confloat(ge=0.0)] = Field(
        0.1,
        description='The relative tolerance over the maximum Sharpe ratio portfolio volatility',
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMaximumSharpeRatioDiversifiedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints12] = None
    riskFreeRate: float = Field(..., description='The risk free rate')


class PortfolioOptimizationMaximumSharpeRatioDiversifiedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup12Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup12(RootModel[List[AssetsGroup12Item]]):
    root: List[AssetsGroup12Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints13(BaseModel):
    assetsGroups: Optional[List[AssetsGroup12]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest(
    BaseModel
):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints13] = None
    riskFreeRate: float = Field(..., description='The risk free rate')
    subsetPortfolios: Optional[conint(ge=1)] = Field(
        128,
        description='The number of subset portfolios to compute; only applicable if the enumeration method for the subset portfolios is random sampling',
    )
    subsetPortfoliosAggregationMethod: Optional[SubsetPortfoliosAggregationMethod] = (
        Field('average', description='The method to aggregate the subset portfolios')
    )
    subsetPortfoliosEnumerationMethod: Optional[SubsetPortfoliosEnumerationMethod] = (
        Field(
            'randomSampling',
            description='The method to enumerate the subset portfolios',
        )
    )
    subsetSize: Optional[conint(ge=2)] = Field(
        None,
        description='The number of assets to include in each subset portfolio; defaults to a value of order the square root of the total number of assets',
    )


class PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostResponse(
    BaseModel
):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class Asset27(BaseModel):
    assetPrices: List[AssetPrice2] = Field(
        ...,
        description='assetPrices[t] is the price of the asset at the time t',
        min_length=2,
    )


class AssetsGroup13Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup13(RootModel[List[AssetsGroup13Item]]):
    root: List[AssetsGroup13Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints14(BaseModel):
    assetsGroups: Optional[List[AssetsGroup13]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest(BaseModel):
    assets: List[Asset27] = Field(..., min_length=1)
    constraints: Optional[Constraints14] = None
    riskFreeRate: float = Field(..., description='The risk free rate')


class PortfolioOptimizationMaximumUlcerPerformanceIndexPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup14Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup14(RootModel[List[AssetsGroup14Item]]):
    root: List[AssetsGroup14Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints15(BaseModel):
    assetsGroups: Optional[List[AssetsGroup14]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )
    portfolioReturn: Optional[float] = Field(
        None,
        description='The portfolio return; exclusive with portfolioVolatility and riskTolerance',
    )
    portfolioVolatility: Optional[confloat(ge=0.0)] = Field(
        None,
        description='The portfolio volatility; exclusive with portfolioReturn and riskTolerance',
    )
    riskTolerance: Optional[confloat(ge=0.0)] = Field(
        None,
        description='The portfolio risk tolerance; exclusive with portfolioReturn and portfolioVolatility',
    )


class PortfolioOptimizationMeanVarianceEfficientPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Constraints15


class PortfolioOptimizationMeanVarianceEfficientPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup15Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup15(RootModel[List[AssetsGroup15Item]]):
    root: List[AssetsGroup15Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints16(BaseModel):
    assetsGroups: Optional[List[AssetsGroup15]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    deltaReturn: Optional[confloat(ge=0.0)] = Field(
        0.1,
        description='The relative tolerance over the mean-variance efficient portfolio return',
    )
    deltaVolatility: Optional[confloat(ge=0.0)] = Field(
        0.1,
        description='The relative tolerance over the mean-variance efficient portfolio volatility',
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )
    portfolioReturn: Optional[float] = Field(
        None,
        description='The portfolio return; exclusive with portfolioVolatility and riskTolerance',
    )
    portfolioVolatility: Optional[confloat(ge=0.0)] = Field(
        None,
        description='The portfolio volatility; exclusive with portfolioReturn and riskTolerance',
    )
    riskTolerance: Optional[confloat(ge=0.0)] = Field(
        None,
        description='The portfolio risk tolerance; exclusive with portfolioReturn and portfolioVolatility',
    )


class PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Constraints16


class PortfolioOptimizationMeanVarianceEfficientDiversifiedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup16Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup16(RootModel[List[AssetsGroup16Item]]):
    root: List[AssetsGroup16Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints17(BaseModel):
    assetsGroups: Optional[List[AssetsGroup16]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )
    portfolioReturn: Optional[float] = Field(
        None,
        description='The portfolio return; exclusive with portfolioVolatility and riskTolerance',
    )
    portfolioVolatility: Optional[confloat(ge=0.0)] = Field(
        None,
        description='The portfolio volatility; exclusive with portfolioReturn and riskTolerance',
    )
    riskTolerance: Optional[confloat(ge=0.0)] = Field(
        None,
        description='The portfolio risk tolerance; exclusive with portfolioReturn and portfolioVolatility',
    )


class PortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedPostRequest(
    BaseModel
):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: List[float] = Field(
        ...,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Constraints17
    subsetPortfolios: Optional[conint(ge=1)] = Field(
        128,
        description='The number of subset portfolios to compute; only applicable if the enumeration method for the subset portfolios is random sampling',
    )
    subsetPortfoliosAggregationMethod: Optional[SubsetPortfoliosAggregationMethod] = (
        Field('average', description='The method to aggregate the subset portfolios')
    )
    subsetPortfoliosEnumerationMethod: Optional[SubsetPortfoliosEnumerationMethod] = (
        Field(
            'randomSampling',
            description='The method to enumerate the subset portfolios',
        )
    )
    subsetSize: Optional[conint(ge=2)] = Field(
        None,
        description='The number of assets to include in each subset portfolio; defaults to a value of order the square root of the total number of assets',
    )


class PortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedPostResponse(
    BaseModel
):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class PortfolioOptimizationMinimumCorrelationPostRequest(BaseModel):
    assets: conint(ge=2)
    assetsCorrelationMatrix: List[AssetsCorrelationMatrixItem] = Field(
        ...,
        description='assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j; required if assetsReturns is not provided',
        min_length=2,
    )
    assetsVolatilities: List[AssetsVolatility] = Field(
        ...,
        description='assetsVariances[i] is the volatility of the asset i; required if assetsCorrelationMatrix is provided and assetsVariances is not provided',
        min_length=2,
    )


class PortfolioOptimizationMinimumCorrelationPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class Asset28(BaseModel):
    assetPrices: List[AssetPrice2] = Field(
        ...,
        description='assetPrices[t] is the price of the asset at the time t',
        min_length=2,
    )


class AssetsGroup17Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup17(RootModel[List[AssetsGroup17Item]]):
    root: List[AssetsGroup17Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints18(BaseModel):
    assetsGroups: Optional[List[AssetsGroup17]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMinimumUlcerIndexPostRequest(BaseModel):
    assets: List[Asset28] = Field(..., min_length=1)
    constraints: Optional[Constraints18] = None


class PortfolioOptimizationMinimumUlcerIndexPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup18Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup18(RootModel[List[AssetsGroup18Item]]):
    root: List[AssetsGroup18Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints19(BaseModel):
    assetsGroups: Optional[List[AssetsGroup18]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMinimumVariancePostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: Optional[List[float]] = Field(
        None,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints19] = None


class PortfolioOptimizationMinimumVariancePostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup19Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup19(RootModel[List[AssetsGroup19Item]]):
    root: List[AssetsGroup19Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints20(BaseModel):
    assetsGroups: Optional[List[AssetsGroup19]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    deltaReturn: Optional[confloat(ge=0.0)] = Field(
        0.1,
        description='The relative tolerance over the minimum variance portfolio return, if applicable',
    )
    deltaVolatility: Optional[confloat(ge=0.0)] = Field(
        0.1,
        description='The relative tolerance over the minimum variance portfolio volatility',
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMinimumVarianceDiversifiedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: Optional[List[float]] = Field(
        None,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints20] = None


class PortfolioOptimizationMinimumVarianceDiversifiedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup20Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup20(RootModel[List[AssetsGroup20Item]]):
    root: List[AssetsGroup20Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints21(BaseModel):
    assetsGroups: Optional[List[AssetsGroup20]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMinimumVarianceSubsetResamplingBasedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    assetsReturns: Optional[List[float]] = Field(
        None,
        description='assetsReturns[i] is the arithmetic return of asset i',
        min_length=1,
    )
    constraints: Optional[Constraints21] = None
    subsetPortfolios: Optional[conint(ge=1)] = Field(
        128,
        description='The number of subset portfolios to compute; only applicable if the enumeration method for the subset portfolios is random sampling',
    )
    subsetPortfoliosAggregationMethod: Optional[SubsetPortfoliosAggregationMethod] = (
        Field('average', description='The method to aggregate the subset portfolios')
    )
    subsetPortfoliosEnumerationMethod: Optional[SubsetPortfoliosEnumerationMethod] = (
        Field(
            'randomSampling',
            description='The method to enumerate the subset portfolios',
        )
    )
    subsetSize: Optional[conint(ge=2)] = Field(
        None,
        description='The number of assets to include in each subset portfolio; defaults to a value of order the square root of the total number of assets',
    )


class PortfolioOptimizationMinimumVarianceSubsetResamplingBasedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class AssetsGroup21Item(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AssetsGroup21(RootModel[List[AssetsGroup21Item]]):
    root: List[AssetsGroup21Item] = Field(
        ...,
        description='assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix',
    )


class Constraints22(BaseModel):
    assetsGroups: Optional[List[AssetsGroup21]] = Field(None, min_length=1)
    assetsGroupsMatrix: Optional[List[AssetsGroupsMatrixItem]] = Field(
        None,
        description='assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups',
        min_length=1,
    )
    maximumAssetsGroupsWeights: Optional[List[float]] = Field(
        None,
        description='maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided',
    )
    maximumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage',
    )
    maximumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure',
    )
    minimumAssetsWeights: Optional[List[confloat(ge=0.0, le=1.0)]] = Field(
        None,
        description='minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage',
    )
    minimumPortfolioExposure: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure',
    )


class PortfolioOptimizationMostDiversifiedPostRequest(BaseModel):
    assets: conint(ge=2) = Field(..., description='The number of assets')
    assetsCovarianceMatrix: List[AssetsCovarianceMatrixItem] = Field(
        ...,
        description='assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j',
        min_length=2,
    )
    constraints: Optional[Constraints22] = None


class PortfolioOptimizationMostDiversifiedPostResponse(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=2,
    )


class Asset29(BaseModel):
    assetPrices: List[AssetPrice2] = Field(
        ...,
        description='assetPrices[t] is the price of the asset at the time t',
        min_length=2,
    )


class Portfolio56(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=1,
    )


class PortfolioSimulationRebalancingDriftWeightPostRequest(BaseModel):
    assets: List[Asset29] = Field(..., min_length=1)
    portfolios: List[Portfolio56] = Field(..., min_length=1)


class Portfolio57(BaseModel):
    portfolioValues: List[confloat(ge=0.0)] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
    )


class PortfolioSimulationRebalancingDriftWeightPostResponse(BaseModel):
    portfolios: List[Portfolio57]


class Asset30(BaseModel):
    assetPrices: List[AssetPrice2] = Field(
        ...,
        description='assetPrices[t] is the price of the asset at the time t',
        min_length=2,
    )


class Portfolio58(BaseModel):
    assetsWeights: List[AssetsWeight] = Field(
        ...,
        description='assetsWeights[i] is the weight of the asset i in the portfolio, in percentage',
        min_length=1,
    )


class PortfolioSimulationRebalancingFixedWeightPostRequest(BaseModel):
    assets: List[Asset30] = Field(..., min_length=1)
    portfolios: List[Portfolio58] = Field(..., min_length=1)


class Portfolio59(BaseModel):
    portfolioValues: List[confloat(ge=0.0)] = Field(
        ...,
        description='portfolioValues[t] is the value of the portfolio at the time t',
    )


class PortfolioSimulationRebalancingFixedWeightPostResponse(BaseModel):
    portfolios: List[Portfolio59]


class Asset31(BaseModel):
    assetPrices: List[AssetPrice2] = Field(
        ...,
        description='assetPrices[t] is the price of the asset at the time t',
        min_length=2,
    )


class PortfolioSimulationRebalancingRandomWeightPostRequest(BaseModel):
    assets: List[Asset31] = Field(..., min_length=1)
    portfolios: Optional[conint(ge=1)] = Field(
        25, description='The number of portfolios to simulate'
    )


class PortfolioSimulationRebalancingRandomWeightPostResponse(BaseModel):
    portfolios: List[Portfolio59]
