# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:37:39+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    AssetsAnalysisAbsorptionRatioPostRequest,
    AssetsAnalysisAbsorptionRatioPostResponse,
    AssetsAnalysisTurbulenceIndexPostRequest,
    AssetsAnalysisTurbulenceIndexPostResponse,
    AssetsCorrelationMatrixBoundsPostRequest,
    AssetsCorrelationMatrixBoundsPostResponse,
    AssetsCorrelationMatrixDenoisedPostRequest,
    AssetsCorrelationMatrixDenoisedPostResponse,
    AssetsCorrelationMatrixDistancePostRequest,
    AssetsCorrelationMatrixDistancePostResponse,
    AssetsCorrelationMatrixEffectiveRankPostRequest,
    AssetsCorrelationMatrixEffectiveRankPostResponse,
    AssetsCorrelationMatrixInformativenessPostRequest,
    AssetsCorrelationMatrixInformativenessPostResponse,
    AssetsCorrelationMatrixNearestPostRequest,
    AssetsCorrelationMatrixNearestPostResponse,
    AssetsCorrelationMatrixPostRequest,
    AssetsCorrelationMatrixPostResponse,
    AssetsCorrelationMatrixRandomPostRequest,
    AssetsCorrelationMatrixRandomPostResponse,
    AssetsCorrelationMatrixShrinkagePostRequest,
    AssetsCorrelationMatrixShrinkagePostResponse,
    AssetsCorrelationMatrixTheoryImpliedPostRequest,
    AssetsCorrelationMatrixTheoryImpliedPostResponse,
    AssetsCorrelationMatrixValidationPostRequest,
    AssetsCorrelationMatrixValidationPostResponse,
    AssetsCovarianceMatrixEffectiveRankPostRequest,
    AssetsCovarianceMatrixEffectiveRankPostResponse,
    AssetsCovarianceMatrixExponentiallyWeightedPostRequest,
    AssetsCovarianceMatrixExponentiallyWeightedPostResponse,
    AssetsCovarianceMatrixPostRequest,
    AssetsCovarianceMatrixPostResponse,
    AssetsCovarianceMatrixValidationPostRequest,
    AssetsCovarianceMatrixValidationPostResponse,
    AssetsKurtosisPostRequest,
    AssetsKurtosisPostResponse,
    AssetsPricesAdjustedForwardPostRequest,
    AssetsPricesAdjustedForwardPostResponse,
    AssetsPricesAdjustedPostRequest,
    AssetsPricesAdjustedPostResponse,
    AssetsReturnsAveragePostRequest,
    AssetsReturnsAveragePostResponse,
    AssetsReturnsPostRequest,
    AssetsReturnsPostResponse,
    AssetsReturnsSimulationBootstrapPostRequest,
    AssetsReturnsSimulationBootstrapPostResponse,
    AssetsSkewnessPostRequest,
    AssetsSkewnessPostResponse,
    AssetsVariancePostRequest,
    AssetsVariancePostResponse,
    AssetsVolatilityPostRequest,
    AssetsVolatilityPostResponse,
    FactorsResidualizationPostRequest,
    FactorsResidualizationPostResponse,
    PortfolioAnalysisAlphaPostRequest,
    PortfolioAnalysisAlphaPostResponse,
    PortfolioAnalysisBetaPostRequest,
    PortfolioAnalysisBetaPostResponse,
    PortfolioAnalysisConditionalValueAtRiskPostRequest,
    PortfolioAnalysisConditionalValueAtRiskPostResponse,
    PortfolioAnalysisContributionsReturnPostRequest,
    PortfolioAnalysisContributionsReturnPostResponse,
    PortfolioAnalysisContributionsRiskPostRequest,
    PortfolioAnalysisContributionsRiskPostResponse,
    PortfolioAnalysisCorrelationSpectrumPostRequest,
    PortfolioAnalysisCorrelationSpectrumPostResponse,
    PortfolioAnalysisDiversificationRatioPostRequest,
    PortfolioAnalysisDiversificationRatioPostResponse,
    PortfolioAnalysisDrawdownsPostRequest,
    PortfolioAnalysisDrawdownsPostResponse,
    PortfolioAnalysisEffectiveNumberOfBetsPostRequest,
    PortfolioAnalysisEffectiveNumberOfBetsPostResponse,
    PortfolioAnalysisFactorsExposuresPostRequest,
    PortfolioAnalysisFactorsExposuresPostResponse,
    PortfolioAnalysisMeanVarianceEfficientFrontierPostRequest,
    PortfolioAnalysisMeanVarianceEfficientFrontierPostResponse,
    PortfolioAnalysisMeanVarianceMinimumVarianceFrontierPostRequest,
    PortfolioAnalysisMeanVarianceMinimumVarianceFrontierPostResponse,
    PortfolioAnalysisReturnPostRequest,
    PortfolioAnalysisReturnPostResponse,
    PortfolioAnalysisReturnsAveragePostRequest,
    PortfolioAnalysisReturnsAveragePostResponse,
    PortfolioAnalysisSharpeRatioBiasAdjustedPostRequest,
    PortfolioAnalysisSharpeRatioBiasAdjustedPostResponse,
    PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest,
    PortfolioAnalysisSharpeRatioConfidenceIntervalPostResponse,
    PortfolioAnalysisSharpeRatioPostRequest,
    PortfolioAnalysisSharpeRatioPostResponse,
    PortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthPostRequest,
    PortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthPostResponse,
    PortfolioAnalysisSharpeRatioProbabilisticPostRequest,
    PortfolioAnalysisSharpeRatioProbabilisticPostResponse,
    PortfolioAnalysisTrackingErrorPostRequest,
    PortfolioAnalysisTrackingErrorPostResponse,
    PortfolioAnalysisUlcerIndexPostRequest,
    PortfolioAnalysisUlcerIndexPostResponse,
    PortfolioAnalysisUlcerPerformanceIndexPostRequest,
    PortfolioAnalysisUlcerPerformanceIndexPostResponse,
    PortfolioAnalysisValueAtRiskPostRequest,
    PortfolioAnalysisValueAtRiskPostResponse,
    PortfolioAnalysisVolatilityPostRequest,
    PortfolioAnalysisVolatilityPostResponse,
    PortfolioConstructionInvestablePostRequest,
    PortfolioConstructionInvestablePostResponse,
    PortfolioConstructionMimickingPostRequest,
    PortfolioConstructionMimickingPostResponse,
    PortfolioConstructionRandomPostRequest,
    PortfolioConstructionRandomPostResponse,
    PortfolioOptimizationEqualRiskContributionsPostRequest,
    PortfolioOptimizationEqualRiskContributionsPostResponse,
    PortfolioOptimizationEqualSharpeRatioContributionsPostRequest,
    PortfolioOptimizationEqualSharpeRatioContributionsPostResponse,
    PortfolioOptimizationEqualVolatilityWeightedPostRequest,
    PortfolioOptimizationEqualVolatilityWeightedPostResponse,
    PortfolioOptimizationEqualWeightedPostRequest,
    PortfolioOptimizationEqualWeightedPostResponse,
    PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest,
    PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostResponse,
    PortfolioOptimizationHierarchicalRiskParityPostRequest,
    PortfolioOptimizationHierarchicalRiskParityPostResponse,
    PortfolioOptimizationInverseVarianceWeightedPostRequest,
    PortfolioOptimizationInverseVarianceWeightedPostResponse,
    PortfolioOptimizationInverseVolatilityWeightedPostRequest,
    PortfolioOptimizationInverseVolatilityWeightedPostResponse,
    PortfolioOptimizationMarketCapitalizationWeightedPostRequest,
    PortfolioOptimizationMarketCapitalizationWeightedPostResponse,
    PortfolioOptimizationMaximumDecorrelationPostRequest,
    PortfolioOptimizationMaximumDecorrelationPostResponse,
    PortfolioOptimizationMaximumReturnDiversifiedPostRequest,
    PortfolioOptimizationMaximumReturnDiversifiedPostResponse,
    PortfolioOptimizationMaximumReturnPostRequest,
    PortfolioOptimizationMaximumReturnPostResponse,
    PortfolioOptimizationMaximumReturnSubsetResamplingBasedPostRequest,
    PortfolioOptimizationMaximumReturnSubsetResamplingBasedPostResponse,
    PortfolioOptimizationMaximumSharpeRatioDiversifiedPostRequest,
    PortfolioOptimizationMaximumSharpeRatioDiversifiedPostResponse,
    PortfolioOptimizationMaximumSharpeRatioPostRequest,
    PortfolioOptimizationMaximumSharpeRatioPostResponse,
    PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest,
    PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostResponse,
    PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest,
    PortfolioOptimizationMaximumUlcerPerformanceIndexPostResponse,
    PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequest,
    PortfolioOptimizationMeanVarianceEfficientDiversifiedPostResponse,
    PortfolioOptimizationMeanVarianceEfficientPostRequest,
    PortfolioOptimizationMeanVarianceEfficientPostResponse,
    PortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedPostRequest,
    PortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedPostResponse,
    PortfolioOptimizationMinimumCorrelationPostRequest,
    PortfolioOptimizationMinimumCorrelationPostResponse,
    PortfolioOptimizationMinimumUlcerIndexPostRequest,
    PortfolioOptimizationMinimumUlcerIndexPostResponse,
    PortfolioOptimizationMinimumVarianceDiversifiedPostRequest,
    PortfolioOptimizationMinimumVarianceDiversifiedPostResponse,
    PortfolioOptimizationMinimumVariancePostRequest,
    PortfolioOptimizationMinimumVariancePostResponse,
    PortfolioOptimizationMinimumVarianceSubsetResamplingBasedPostRequest,
    PortfolioOptimizationMinimumVarianceSubsetResamplingBasedPostResponse,
    PortfolioOptimizationMostDiversifiedPostRequest,
    PortfolioOptimizationMostDiversifiedPostResponse,
    PortfolioSimulationRebalancingDriftWeightPostRequest,
    PortfolioSimulationRebalancingDriftWeightPostResponse,
    PortfolioSimulationRebalancingFixedWeightPostRequest,
    PortfolioSimulationRebalancingFixedWeightPostResponse,
    PortfolioSimulationRebalancingRandomWeightPostRequest,
    PortfolioSimulationRebalancingRandomWeightPostResponse,
)

app = MCPProxy(
    contact={
        'email': 'contact@portfoliooptimizer.io',
        'name': 'Support',
        'url': 'https://portfoliooptimizer.io/',
    },
    description='Portfolio Optimizer is a [Web API](https://en.wikipedia.org/wiki/Web_API) to analyze and optimize investment portfolios (collection of financial assets such as stocks, bonds, ETFs, crypto-currencies) using modern portfolio theory algorithms (mean-variance, VaR, etc.).\n\n# API General Information\n\n  Portfolio Optimizer is based on [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) for easy integration, uses [JSON](https://en.wikipedia.org/wiki/JSON) for the exchange of data and uses a standard [HTTP verb](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) (`POST`) to represent the action(s).\n\nPortfolio Optimizer is also as secured as a Web API could be: \n* [256-bit HTTPS Encryption](https://en.wikipedia.org/wiki/HTTPS)\n* No usage of cookies\n* No usage of personal data  \n\n## API Headers \nThe following HTTP header(s) are required when calling Portfolio Optimizer endpoints:\n* `Content-type: application/json`  \n  This header specifies that the data provided in input to the endpoint is in JSON format\n\nThe following HTTP header(s) are optional when calling Portfolio Optimizer endpoints:\n* `Content-Encoding: gzip`  \n  This header indicates that the data provided in input to the endpoint is compressed with gzip.\n* `X-API-Key: <private API key>`  \n  This header enables [authenticated users](#auth) to provide their private [API key](#overview--api-key) in order to [benefit from higher API limits](#overview--api-limits)\n\n## API Key\nPortfolio Optimizer is free to use, but not free to run.\n\nIn order to obtain an API key and benefit from [higher API limits](#overview--api-limits), a *small* participation to Portfolio Optimizer running costs is required.\n\nThis participation takes the form of coffee(s), with one coffee = one month of usage.\n\n<p><a href="https://www.buymeacoffee.com/portfolioopt"><img alt=\'Buy a Coffee at buymeacoffee.com\' src="https://img.buymeacoffee.com/button-api/?text=Buymeacoffee.com&emoji=&slug=portfolioopt&button_colour=000000&font_colour=ffffff&font_family=Cookie&outline_colour=ffffff&coffee_colour=FFDD00"></a></p>\n\n\n> **Notes:** \n> * Please make sure not to expose your API key publicly!\n\n## API Limits \n\nPortfolio Optimizer comes with *fairly reasonable* API limits.\n\nFor anonymous users:  \n* The API requests are restricted to a subset of all the available endpoints and/or endpoints features  \n* The API requests are limited to 1 request per second for all the anonymous users combined, with concurrent requests rejected \n* The API requests are limited to 1 second of execution time\n* The API requests are limited to 20 assets, 250 portfolios, 500 series data points and 5 factors\n\nFor authenticated users with an [API key](#overview--api-key):  \n* The API requests have access to all the available endpoints and endpoints features\n* The API requests are limited to 10000 requests per 24 hour per API key, with concurrent requests queued\n* The API requests are limited to 2.5 seconds of execution time\n* The API requests are limited to 100 assets, 1250 portfolios, 2500 series data points and 25 factors\n\n> **Notes:** \n> * It is possible to further relax the API limits, or to disable the API limits alltogether; please [contact the support](https://portfoliooptimizer.io/contact/) for more details.\n> * Information on the API rate limits are provided in response messages HTTP headers `x-ratelimit-*`:  \n>   * `x-ratelimit-limit-second`, the limit on the number of API requests per second\n>   * `x-ratelimit-remaining-second`, the number of remaining API requests in the current second    \n>   * `x-ratelimit-limit-minute`, the limit on the number of API requests per minute\n>   * ...\n\n## API Regions\nPortfolio Optimizer servers are located in Western Europe.\n\n> **Notes:** \n> * It is possible to deploy Portfolio Optimizer in other geographical regions, for example to improve the API latency; please [contact the support](https://portfoliooptimizer.io/contact/) for more details. \n\n## API Response Codes       \n\nStandard [HTTP response codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) are used by Portfolio Optimizer to provide details on the status of API requests.\n\n| HTTP Code | Description | Notes |\n| --------- | ----------- | ----- |\n| 200 | Request successfully processed | - |\n| 400 | Request failed to be processed because of incorrect content | The response message body contains information on the incorrect content |\n| 401 | Request failed to be processed because of invalid API key | - |\n| 404 | Request failed to be processed because of non existing endpoint | The requested endpoint might exist, but needs to be accessed with another HTTP method (e.g., `POST` instead of `GET`) |\n| 429 | Request failed to be processed because of API limits violated | The response message HTTP headers `x-ratelimit-*` contain information on the [API limits](#overview--api-limits) |\n| 500 | Request failed to be processed because of an internal error | Something went wrong on Portfolio Optimizer side, do not hesitate to [report the issue](#overview--support) |\n| 502 | Request failed to be processed because of a temporary connectivity error | Something went wrong on Portfolio Optimizer side, please check the [API status](#overview--api-status) and do not hesitate to [report the issue](#overview--support) |\n\n## API Status  \n\nPortfolio Optimizer is monitored 24/7 by [UptimeRobot](https://stats.uptimerobot.com/wgW71SL1AW).\n\n# Support\n\nFor any issue or question about Portfolio Optimizer, please do not hesitate to [contact the support](https://portfoliooptimizer.io/contact/).\n',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://portfoliooptimizer.io/terms-of-service',
    title='Portfolio Optimizer',
    version='1.0.9',
    servers=[
        {'url': 'https://api.portfoliooptimizer.io/v1'},
        {'url': 'https://eu-west-1.api.portfoliooptimizer.io/v1'},
    ],
)


@app.post(
    '/assets/analysis/absorption-ratio',
    description=""" Compute the absorption ratio associated to a universe of assets.

References
* [Mark Kritzman, Yuanzhen Li, Sebastien Page and Roberto Rigobon, Principal Components as a Measure of Systemic Risk, The Journal of Portfolio Management Summer 2011, 37 (4) 112-126](https://jpm.pm-research.com/content/37/4/112)
 """,
    tags=['assets_performance_analysis', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_analysis_absorption_ratio(
    body: AssetsAnalysisAbsorptionRatioPostRequest,
):
    """
    Absorption Ratio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/analysis/turbulence-index',
    description=""" Compute the turbulence index associated to a universe of assets.

References
* [M. Kritzman, Y. Li, Skulls, Financial Turbulence, and Risk Management,Financial Analysts Journal, Volume 66, Number 5, Pages 30-41, Year 2010](https://www.tandfonline.com/doi/abs/10.2469/faj.v66.n5.3)
* [Kinlaw, W., Turkington, D. Correlation surprise. J Asset Manag 14, 385–399 (2013)](https://link.springer.com/article/10.1057/jam.2013.27)
 """,
    tags=['assets_performance_analysis', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_analysis_turbulence_index(
    body: AssetsAnalysisTurbulenceIndexPostRequest,
):
    """
    Turbulence Index
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/correlation/matrix',
    description=""" Compute the Pearson asset correlation matrix from either:  
* The asset returns
* The asset covariance matrix

References
* [Wikipedia, Correlation and Dependence](https://en.wikipedia.org/wiki/Correlation_and_dependence#Correlation_matrices)
 """,
    tags=['assets_performance_analysis', 'correlation_covariance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_correlation_matrix(body: AssetsCorrelationMatrixPostRequest):
    """
    Correlation Matrix
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/correlation/matrix/bounds',
    description=""" Compute the lower bounds and the upper bounds of an asset correlation matrix associated to a given group of assets.
 
 References
 * [Kawee Numpacharoen & Kornkanok Bunwong (2013) Boundaries of Correlation Adjustment with Applications to Financial Risk Management, Applied Mathematical Finance, 20:4, 403-414](http://dx.doi.org/10.1080/1350486X.2012.723517).
 """,
    tags=['assets_performance_analysis', 'correlation_covariance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_correlation_matrix_bounds(
    body: AssetsCorrelationMatrixBoundsPostRequest,
):
    """
    Correlation Matrix Bounds
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/correlation/matrix/denoised',
    description=""" Compute a denoised asset correlation matrix, using one of the following methods:
 * The eigenvalues clipping method, described in the first reference, which is based on random matrix theory
 
 References
 * [Laurent Laloux, Pierre Cizeau, Jean-Philippe Bouchaud, and Marc Potters, Noise Dressing of Financial Correlation Matrices, Phys. Rev. Lett. 83, 1467](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.83.1467)
 """,
    tags=['correlation_covariance_analysis', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_correlation_matrix_denoised(
    body: AssetsCorrelationMatrixDenoisedPostRequest,
):
    """
    Denoised Correlation Matrix
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/correlation/matrix/distance',
    description=""" Compute the distance between an asset correlation matrix and a reference correlation matrix, using one of the following distance metrics:
* Euclidean distance (default), which is the distance induced by [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm)
* Correlation matrix distance, defined in the first reference, which corresponds to [the cosine distance](https://en.wikipedia.org/wiki/Cosine_similarity) between the two vectorized asset correlation matrices
* Bures distance, defined in the second reference

 References
 * [M. Herdin, N. Czink, H. Ozcelik and E. Bonek, Correlation matrix distance, a meaningful measure for evaluation of non-stationary MIMO channels, 2005 IEEE 61st Vehicular Technology Conference, 2005, pp. 136-140 Vol. 1](https://ieeexplore.ieee.org/document/1543265)
 * [Rajendra Bhatia, Tanvi Jain, Yongdo Lim, On the Bures–Wasserstein distance between positive definite matrices, Expositiones Mathematicae, Volume 37, Issue 2, 2019](https://www.sciencedirect.com/science/article/pii/S0723086918300021)
 """,
    tags=['correlation_covariance_analysis', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_correlation_matrix_distance(
    body: AssetsCorrelationMatrixDistancePostRequest,
):
    """
    Correlation Matrix Distance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/correlation/matrix/effective-rank',
    description=""" Compute the effective rank of an asset correlation matrix.

References
* [Olivier Roy and Martin Vetterli, The effective rank: A measure of effective dimensionality, 15th European Signal Processing Conference, 2007](https://ieeexplore.ieee.org/document/7098875)
 """,
    tags=['assets_performance_analysis', 'correlation_covariance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_correlation_matrix_effective_rank(
    body: AssetsCorrelationMatrixEffectiveRankPostRequest,
):
    """
    Correlation Matrix Effective Rank
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/correlation/matrix/informativeness',
    description=""" Compute the informativeness of an asset correlation matrix, using one of the following distance metrics:
* Euclidean distance (default), which is the distance induced by [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm)
* Correlation matrix distance, defined in the second reference, which corresponds to [the cosine distance](https://en.wikipedia.org/wiki/Cosine_similarity) between the two vectorized asset correlation matrices
* Bures distance, defined in the third reference

 References
 * [Austin J. Brockmeier and Tingting Mu and Sophia Ananiadou and John Y. Goulermas, Quantifying the Informativeness of Similarity Measurements, Journal of Machine Learning Research, 2017](http://jmlr.org/papers/v18/16-296.html)
 * [M. Herdin, N. Czink, H. Ozcelik and E. Bonek, Correlation matrix distance, a meaningful measure for evaluation of non-stationary MIMO channels, 2005 IEEE 61st Vehicular Technology Conference, 2005, pp. 136-140 Vol. 1](https://ieeexplore.ieee.org/document/1543265)
 * [Rajendra Bhatia, Tanvi Jain, Yongdo Lim, On the Bures–Wasserstein distance between positive definite matrices, Expositiones Mathematicae, Volume 37, Issue 2, 2019](https://www.sciencedirect.com/science/article/pii/S0723086918300021)
 """,
    tags=['correlation_covariance_analysis', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_correlation_matrix_informativeness(
    body: AssetsCorrelationMatrixInformativenessPostRequest,
):
    """
    Correlation Matrix Informativeness
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/correlation/matrix/nearest',
    description=""" Compute the _closest_ - in terms of [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm) - asset correlation matrix to an approximate asset correlation matrix, optionally keeping a selected number of correlations fixed.

References
* [Nicholas J. Higham, Computing the Nearest Correlation Matrix—A Problem from Finance, IMA J. Numer. Anal. 22, 329–343, 2002.](http://www.maths.manchester.ac.uk/~higham/narep/narep369.pdf)
 """,
    tags=['correlation_covariance_analysis', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_correlation_matrix_nearest(
    body: AssetsCorrelationMatrixNearestPostRequest,
):
    """
    Nearest Correlation Matrix
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/correlation/matrix/random',
    description=""" Generate an asset correlation matrix uniformly at random over the space of positive definite correlation matrices.

References
* [Joe, H., Generating random correlation matrices based on partial correlations. Journal of Multivariate Analysis, 2006, 97, 2177-2189](https://www.sciencedirect.com/science/article/pii/S0047259X05000886)
 """,
    tags=['correlation_covariance_analysis', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_correlation_matrix_random(
    body: AssetsCorrelationMatrixRandomPostRequest,
):
    """
    Random Correlation Matrix
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/correlation/matrix/shrinkage',
    description=""" Compute an asset correlation matrix as a convex linear combination of an asset correlation matrix and a target correlation matrix, the target correlation matrix being either:  
 * An equicorrelation matrix made of 1
 * An equicorrelation matrix made of 0
 * An equicorrelation matrix made of -1/(n-1), with n the number of assets
 * A provided correlation matrix
 
 References
 * [Steiner, Andreas, Manipulating Valid Correlation Matrices](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1878165)
 """,
    tags=['correlation_covariance_analysis', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_correlation_matrix_shrinkage(
    body: AssetsCorrelationMatrixShrinkagePostRequest,
):
    """
    Correlation Matrix Shrinkage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/correlation/matrix/theory-implied',
    description=""" Compute the theory-implied asset correlation matrix associated with:
* A hierarchical classification of a universe of assets
* An asset correlation matrix

References
* [Lopez de Prado, Marcos Estimation of Theory-Implied Correlation Matrices (November 9, 2019)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3484152)
 """,
    tags=['correlation_covariance_analysis', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_correlation_matrix_theory_implied(
    body: AssetsCorrelationMatrixTheoryImpliedPostRequest,
):
    """
    Theory-Implied Correlation Matrix
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/correlation/matrix/validation',
    description=""" Validate whether a matrix is an asset correlation matrix.

References
* [Wikipedia, Correlation and Dependence](https://en.wikipedia.org/wiki/Correlation_and_dependence#Correlation_matrices)
 """,
    tags=['correlation_covariance_analysis', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_correlation_matrix_validation(
    body: AssetsCorrelationMatrixValidationPostRequest,
):
    """
    Correlation Matrix Validation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/covariance/matrix',
    description=""" Compute the covariance matrix of assets from either:  
* The asset correlation matrix and their volatilities (i.e., standard deviations)
* The asset correlation matrix and their variances
* The asset returns

References
* [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)
 """,
    tags=['correlation_covariance_analysis', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_covariance_matrix(body: AssetsCovarianceMatrixPostRequest):
    """
    Covariance Matrix
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/covariance/matrix/effective-rank',
    description=""" Compute the effective rank of an asset covariance matrix.

References
* [Olivier Roy and Martin Vetterli, The effective rank: A measure of effective dimensionality, 15th European Signal Processing Conference, 2007](https://ieeexplore.ieee.org/document/7098875)
 """,
    tags=['correlation_covariance_analysis', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_covariance_matrix_effective_rank(
    body: AssetsCovarianceMatrixEffectiveRankPostRequest,
):
    """
    Covariance Matrix Effective Rank
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/covariance/matrix/exponentially-weighted',
    description=""" Compute an exponentially weighted covariance matrix of assets returns.

References
* [RiskMetrics Group. Longerstaey, J. (1996). RiskMetrics technical document, Technical Report fourth edition](https://www.msci.com/documents/10199/5915b101-4206-4ba0-aee2-3449d5c7e95a)
 """,
    tags=['correlation_covariance_analysis', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_covariance_matrix_exponentially_weighted(
    body: AssetsCovarianceMatrixExponentiallyWeightedPostRequest,
):
    """
    Exponentially Weighted Covariance Matrix
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/covariance/matrix/validation',
    description=""" Validate whether a matrix is a covariance matrix.

References
* [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)
 """,
    tags=['correlation_covariance_analysis', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_covariance_matrix_validation(
    body: AssetsCovarianceMatrixValidationPostRequest,
):
    """
    Covariance Matrix Validation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/kurtosis',
    description=""" Compute the kurtosis of one or several asset(s), from the asset returns.

References
* [Wikipedia, Kurtosis](https://en.wikipedia.org/wiki/Kurtosis)
 """,
    tags=['assets_performance_analysis', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_kurtosis(body: AssetsKurtosisPostRequest):
    """
    Kurtosis
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/prices/adjusted',
    description=""" Compute the backward-adjusted prices of one or several asset(s) for one or several date(s) from:
* Unadjusted prices
* Capital distributions, like stock dividends
* Splits, like stock splits

The adjustment base date is chosen to be the last date for which unadjusted prices are available, which implies that:
* The price on the last date for which unadjusted prices are available is left unadjusted
* The price on any other date is adjusted based on the capital distributions and the splits which occurred between this date and the last date for which unadjusted prices are available

References
* [Center for Research in Security Prices](https://www.crsp.org/products/documentation/crsp-calculations)
 """,
    tags=['data_adjustment_and_price_simulation'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_prices_adjusted(body: AssetsPricesAdjustedPostRequest):
    """
    Adjusted Prices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/prices/adjusted/forward',
    description=""" Compute the forward-adjusted prices of one or several asset(s) for one or several date(s) from:
* Unadjusted prices
* Capital distributions, like stock dividends
* Splits, like stock splits

The adjustment base date is chosen to be the first date for which unadjusted prices are available, which implies that:
* The price on the first date for which unadjusted prices are available is left unadjusted
* The price on any other date is adjusted based on the capital distributions and the splits which occurred between this date and the first date for which unadjusted prices are available

References
* [Center for Research in Security Prices](https://www.crsp.org/products/documentation/crsp-calculations)
 """,
    tags=['data_adjustment_and_price_simulation'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_prices_adjusted_forward(body: AssetsPricesAdjustedForwardPostRequest):
    """
    Forward-Adjusted Prices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/returns',
    description=""" Compute the arithmetic return(s) of one or several asset(s) for one or several time period(s).

References
* [Wikipedia, Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Return)
 """,
    tags=['assets_performance_analysis', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_returns(body: AssetsReturnsPostRequest):
    """
    Arithmetic Returns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/returns/average',
    description=""" Compute the arithmetic average of the return(s) of one or several asset(s).

References
* [Wikipedia, Arithmetic Average Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Arithmetic_average_rate_of_return)
 """,
    tags=['assets_performance_analysis', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_returns_average(body: AssetsReturnsAveragePostRequest):
    """
    Arithmetic Average Return
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/returns/simulation/bootstrap',
    description=""" Simulate the return(s) of one or several asset(s) for one or several time period(s) using a bootstrap method.

References
* [Efron, B. (1979), Bootstrap methods: Another look at the jackknife, The Annals of Statistics 7, 1-26](https://projecteuclid.org/journals/annals-of-statistics/volume-7/issue-1/Bootstrap-Methods-Another-Look-at-the-Jackknife/10.1214/aos/1176344552.full)
* [Politis, D. N. and Romano, J. P., A circular block resampling procedure for stationary data, in R. Lepage and L. Billard, eds, Exploring the Limits of Bootstrap, Wiley, New York, pp. 263-270](https://statistics.stanford.edu/technical-reports/circular-block-resampling-procedure-stationary-data)
* [Politis, D. N. and Romano, J. P., The stationary bootstrap, Journal of the American Statistical Association 89, 1303-1313](https://www.jstor.org/stable/2290993)
 """,
    tags=['data_adjustment_and_price_simulation', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_returns_simulation_bootstrap(
    body: AssetsReturnsSimulationBootstrapPostRequest,
):
    """
    Bootstrap
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/skewness',
    description=""" Compute the skewness of one or several asset(s), from the asset returns.

References
* [Wikipedia, Skewness](https://en.wikipedia.org/wiki/Skewness)
 """,
    tags=['assets_performance_analysis', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_skewness(body: AssetsSkewnessPostRequest):
    """
    Skewness
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/variance',
    description=""" Compute the variance of one or several asset(s) from either:  
* The asset returns
* The asset covariance matrix
* The asset volatility(ies)

References
* [Wikipedia, Variance](https://en.wikipedia.org/wiki/Variance)        
 """,
    tags=[
        'assets_performance_analysis',
        'portfolio_performance_metrics',
        'correlation_covariance_analysis',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_variance(body: AssetsVariancePostRequest):
    """
    Variance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets/volatility',
    description=""" Compute the volatility (i.e., standard deviation) of one or several asset(s) from either:  
* The asset returns
* The asset covariance matrix
* The asset variance(s)

References
* [Wikipedia, Standard Deviation](https://en.wikipedia.org/wiki/Standard_deviation)
 """,
    tags=['assets_performance_analysis', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assets_volatility(body: AssetsVolatilityPostRequest):
    """
    Volatility
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/factors/residualization',
    description=""" Compute the residuals of a factor against a set of factors, using a returns-based linear regression analysis.

References
* [Factor Research, Factor Exposure Analysis: Exploring Residualization](https://insights.factorresearch.com/research-factor-exposure-analysis-exploring-residualization/)
* [Catalina B. Garcia, Román Salmeron, Claudia Garcia & Jose Garcia (2019): Residualization: justification, properties and application, Journal of Applied Statistics](https://doi.org/10.1080/02664763.2019.1701638)
 """,
    tags=['data_adjustment_and_price_simulation', 'correlation_covariance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_factors_residualization(body: FactorsResidualizationPostRequest):
    """
    Residualization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/alpha',
    description=""" Compute the Jensen’s alpha of one or several portfolio(s) in the Capital Asset Pricing Model (CAPM).

References
* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution  
 """,
    tags=[
        'portfolio_performance_metrics',
        'portfolio_optimization_strategies',
        'assets_performance_analysis',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_alpha(body: PortfolioAnalysisAlphaPostRequest):
    """
    Alpha
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/beta',
    description=""" Compute the beta of one or several portfolio(s) in the Capital Asset Pricing Model (CAPM).

References
* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution  
 """,
    tags=['portfolio_performance_metrics', 'correlation_covariance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_beta(body: PortfolioAnalysisBetaPostRequest):
    """
    Beta
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/conditional-value-at-risk',
    description=""" Compute the conditional value at risk of one or several portfolio(s) from portfolio values.

References
* [Wikipedia, Value at risk](https://en.wikipedia.org/wiki/Value_at_risk)
* [Acerbi, C. and Tasche, D. (2002), Expected Shortfall: A Natural Coherent Alternative to Value at Risk. Economic Notes, 31: 379-388](https://onlinelibrary.wiley.com/doi/abs/10.1111/1468-0300.00091)
 """,
    tags=['portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_conditional_value_at_risk(
    body: PortfolioAnalysisConditionalValueAtRiskPostRequest,
):
    """
    Conditional Value At Risk
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/contributions/return',
    description=""" Perform a return contribution analysis of one or several portfolio(s), optionally using groups of assets.

References
* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
 """,
    tags=['portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_contributions_return(
    body: PortfolioAnalysisContributionsReturnPostRequest,
):
    """
    Return Contributions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/contributions/risk',
    description=""" Perform a risk contribution analysis of one or several portfolio(s), optionally using groups of assets.

References
* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
 """,
    tags=['portfolio_performance_metrics', 'portfolio_optimization_strategies'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_contributions_risk(
    body: PortfolioAnalysisContributionsRiskPostRequest,
):
    """
    Risk Contributions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/correlation-spectrum',
    description=""" Compute the correlation spectrum of one or several portfolio(s).

References
* [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)
 """,
    tags=[
        'assets_performance_analysis',
        'correlation_covariance_analysis',
        'portfolio_performance_metrics',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_correlation_spectrum(
    body: PortfolioAnalysisCorrelationSpectrumPostRequest,
):
    """
    Correlation Spectrum
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/diversification-ratio',
    description=""" Compute the diversification ratio of one or several portfolio(s).

References
* [Yves Choueifaty and Yves Coignard, Toward Maximum Diversification, The Journal of Portfolio Management Fall 2008, 35 (1) 40-51](https://doi.org/10.3905/JPM.2008.35.1.40)
* [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)
 """,
    tags=['portfolio_performance_metrics', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_diversification_ratio(
    body: PortfolioAnalysisDiversificationRatioPostRequest,
):
    """
    Diversification Ratio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/drawdowns',
    description=""" Compute the drawdown function - also called the underwater equity curve -, as well as the worst 10 drawdowns of one or several portfolio(s).

References
* [Wikipedia, Drawdown](https://en.wikipedia.org/wiki/Drawdown_(economics))        
 """,
    tags=['portfolio_performance_metrics', 'portfolio_optimization_strategies'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_drawdowns(body: PortfolioAnalysisDrawdownsPostRequest):
    """
    Drawdowns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/effective-number-of-bets',
    description=""" Compute the effective number of bets of one or several portfolio(s).

References
* [Meucci, Attilio and Santangelo, Alberto and Deguest, Romain, Risk Budgeting and Diversification Based on Optimized Uncorrelated Factors (November 10, 2015)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2276632)
 """,
    tags=['portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_effective_number_of_bets(
    body: PortfolioAnalysisEffectiveNumberOfBetsPostRequest,
):
    """
    Effective Number of Bets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/factors/exposures',
    description=""" Compute the exposures of one or several portfolio(s) to a set of factors, using a returns-based linear regression analysis.

References
* [Measuring Factor Exposures: Uses and Abuses, Ronen Israel and Adrienne Ross, The Journal of Alternative Investments Summer 2017, 20 (1) 10-25](https://jai.pm-research.com/content/20/1/10.short) 
 """,
    tags=['portfolio_performance_metrics', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_factors_exposures(
    body: PortfolioAnalysisFactorsExposuresPostRequest,
):
    """
    Factor Exposures
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/mean-variance/efficient-frontier',
    description=""" Compute the discretized mean-variance efficient frontier associated to a list of assets, optionally subject to:
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraint

References
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=[
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'subset_resampling_optimization',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_mean_variance_efficient_frontier(
    body: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequest,
):
    """
    Mean-Variance Efficient Frontier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/mean-variance/minimum-variance-frontier',
    description=""" Compute the discretized mean-variance minimum variance frontier associated to a list of assets, optionally subject to:
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraint

> This endpoint is similar to the endpoint [`/portfolio/analysis/mean-variance/efficient-frontier`](#post-/portfolio/analysis/mean-variance/efficient-frontier), because the mean-variance efficient frontier is the "top" portion of the mean-variance minimum variance frontier.

References
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=[
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'portfolio_performance_metrics',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_mean_variance_minimum_variance_frontier(
    body: PortfolioAnalysisMeanVarianceMinimumVarianceFrontierPostRequest,
):
    """
    Mean-Variance Minimum Variance Frontier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/return',
    description=""" Compute the arithmetic return of one or several portfolio(s) from either:  
* Portfolio assets arithmetic returns
* Portfolio values

References
* [Wikipedia, Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Return)
* Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=['portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_return(body: PortfolioAnalysisReturnPostRequest):
    """
    Arithmetic Return
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/returns/average',
    description=""" Compute the arithmetic average of the arithmetic return(s) of one or several portfolio(s).

References
* [Wikipedia, Arithmetic Average Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Arithmetic_average_rate_of_return)
 """,
    tags=['portfolio_performance_metrics', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_returns_average(
    body: PortfolioAnalysisReturnsAveragePostRequest,
):
    """
    Arithmetic Average Return
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/sharpe-ratio',
    description=""" Compute the Sharpe ratio of one or several portfolio(s) from either:
* Portfolio assets arithmetic returns and assets covariance matrix
* Portfolio values

References
* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
* Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=['portfolio_performance_metrics', 'subset_resampling_optimization'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_sharpe_ratio(body: PortfolioAnalysisSharpeRatioPostRequest):
    """
    Sharpe Ratio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/sharpe-ratio/bias-adjusted',
    description=""" Compute the Sharpe ratio of one or several portfolio(s), adjusted for small sample bias.

References
* [Opdyke, J., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308–336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)
 """,
    tags=['portfolio_performance_metrics', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_sharpe_ratio_bias_adjusted(
    body: PortfolioAnalysisSharpeRatioBiasAdjustedPostRequest,
):
    """
    Bias-Adjusted Sharpe Ratio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/sharpe-ratio/confidence-interval',
    description=""" Build a confidence interval for the Sharpe ratio of one or several portfolio(s).

References
* [Opdyke, J.D., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308–336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)
 """,
    tags=['portfolio_performance_metrics', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_sharpe_ratio_confidence_interval(
    body: PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest,
):
    """
    Sharpe Ratio Confidence Interval
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/sharpe-ratio/probabilistic',
    description=""" Compute the probabilistic Sharpe ratio of one or several portfolio(s).

References
* [Opdyke, J.D., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308–336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)
* [Bailey, David H. and Lopez de Prado, Marcos, The Sharpe Ratio Efficient Frontier (April 1, 2012). Journal of Risk, Vol. 15, No. 2, Winter 2012/13](https://ssrn.com/abstract=1821643)
 """,
    tags=['portfolio_performance_metrics', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_sharpe_ratio_probabilistic(
    body: PortfolioAnalysisSharpeRatioProbabilisticPostRequest,
):
    """
    Probabilistic Sharpe Ratio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/sharpe-ratio/probabilistic/minimum-track-record-length',
    description=""" Compute the minimum track record length of one or several portfolio(s).

References
* [Bailey, David H. and Lopez de Prado, Marcos, The Sharpe Ratio Efficient Frontier (April 1, 2012). Journal of Risk, Vol. 15, No. 2, Winter 2012/13](https://ssrn.com/abstract=1821643)
 """,
    tags=['portfolio_performance_metrics', 'portfolio_optimization_strategies'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def min_track_record_length(
    body: PortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthPostRequest,
):
    """
    Minimum Track Record Length
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/tracking-error',
    description=""" Compute the tracking error between a benchmark and one or several portfolio(s).

References
* [Wikipedia, Tracking error](https://en.wikipedia.org/wiki/Tracking_error) 
* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution 
 """,
    tags=['portfolio_performance_metrics', 'assets_performance_analysis'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_tracking_error(
    body: PortfolioAnalysisTrackingErrorPostRequest,
):
    """
    Tracking Error
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/ulcer-index',
    description=""" Compute the Ulcer Index of one or several portfolio(s).

References
* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
* [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
 """,
    tags=['portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_ulcer_index(body: PortfolioAnalysisUlcerIndexPostRequest):
    """
    Ulcer Index
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/ulcer-performance-index',
    description=""" Compute the Ulcer Performance Index of one or several portfolio(s).

References
* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
* [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
 """,
    tags=['portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_ulcer_performance_index(
    body: PortfolioAnalysisUlcerPerformanceIndexPostRequest,
):
    """
    Ulcer Performance Index
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/value-at-risk',
    description=""" Compute the value at risk of one or several portfolio(s) from portfolio values.

References
* [Wikipedia, Value at risk](https://en.wikipedia.org/wiki/Value_at_risk)
* [Acerbi, C. and Tasche, D. (2002), Expected Shortfall: A Natural Coherent Alternative to Value at Risk. Economic Notes, 31: 379-388](https://onlinelibrary.wiley.com/doi/abs/10.1111/1468-0300.00091)
 """,
    tags=['portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_value_at_risk(
    body: PortfolioAnalysisValueAtRiskPostRequest,
):
    """
    Value At Risk
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/analysis/volatility',
    description=""" Compute the volatility (i.e., standard deviation) of one or several portfolio(s) from either:  
* Portfolio assets covariance matrix
* Portfolio values

References
* [Wikipedia, Standard Deviation](https://en.wikipedia.org/wiki/Standard_deviation#Finance)
* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
* Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=['assets_performance_analysis', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_analysis_volatility(body: PortfolioAnalysisVolatilityPostRequest):
    """
    Volatility
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/construction/investable',
    description=""" Compute an investable portfolio as close as possible, in terms of assets weights, to a desired portfolio, taking into account:
* The desired assets weights
* The desired assets groups weights
* The desired maximum assets groups weights
* The prices of the assets
* The portfolio value
* The requirement to purchase some assets by round lots or by odd lots
* The possibility to purchase some assets by a fractional quantity of shares
* The requirement to purchase a minimum number of shares, or a minimum monetary value, for some assets

References
* [Steiner, Andreas, Accuracy and Rounding in Portfolio Construction](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2261131)
 """,
    tags=['portfolio_construction_strategies', 'portfolio_optimization_strategies'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_construction_investable(
    body: PortfolioConstructionInvestablePostRequest,
):
    """
    Investable Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/construction/mimicking',
    description=""" Construct a portfolio as close as possible, in terms of returns, to a benchmark, optionally subject to:
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

References 
* Konstantinos Benidis, Yiyong Feng, Daniel P. Palomar, Optimization Methods for Financial Index Tracking: From Theory to Practice, now publishers Inc (7 juin 2018)
 """,
    tags=['portfolio_construction_strategies', 'portfolio_performance_metrics'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_construction_mimicking(
    body: PortfolioConstructionMimickingPostRequest,
):
    """
    Mimicking Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/construction/random',
    description=""" Construct one or several random portfolio(s), optionally subject to:       
* Minimum and maximum weights constraints
* Minimum and maximum portfolio exposure constraints

> Because of the nature of the endpoint, subsequent calls with the same input data will result in different output data.

References
* [William Thornton Shaw, Monte Carlo Portfolio Optimization for General Investor Risk-Return Objectives and Arbitrary Return Distributions: A Solution for Long-Only Portfolios](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1680224)
 """,
    tags=['portfolio_construction_strategies', 'data_adjustment_and_price_simulation'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_construction_random(body: PortfolioConstructionRandomPostRequest):
    """
    Random Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/equal-risk-contributions',
    description=""" Compute the asset weights of the equal risk contributions portfolio, optionally subject to:  
* Minimum and maximum weights constraints  

References
 * [Richard, Jean-Charles and Roncalli, Thierry, Constrained Risk Budgeting Portfolios: Theory, Algorithms, Applications & Puzzles](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3331184)
 """,
    tags=['portfolio_optimization_strategies', 'portfolio_optimization_approaches'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_equal_risk_contributions(
    body: PortfolioOptimizationEqualRiskContributionsPostRequest,
):
    """
    Equal Risk Contributions Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/equal-sharpe-ratio-contributions',
    description=""" Compute the asset weights of the equal Sharpe Ratio contributions portfolio.

References
 * [Andreas Steiner, Sharpe Ratio Contribution and Attribution Analysis](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1839166")
 """,
    tags=[
        'portfolio_performance_metrics',
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_equal_sharpe_ratio_contributions(
    body: PortfolioOptimizationEqualSharpeRatioContributionsPostRequest,
):
    """
    Equal Sharpe Ratio Contributions Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/equal-volatility-weighted',
    description=""" Compute the asset weights of the equal volatility-weighted portfolio.

References
 * [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)
 """,
    tags=[
        'portfolio_performance_metrics',
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'portfolio_construction_strategies',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_equal_volatility_weighted(
    body: PortfolioOptimizationEqualVolatilityWeightedPostRequest,
):
    """
    Equal Volatility Weighted Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/equal-weighted',
    description=""" Compute the asset weights of the equal-weighted portfolio.

References
 * [Victor DeMiguel and al., Optimal Versus Naive Diversification: How Inefficient is the 1/N Portfolio Strategy?](https://academic.oup.com/rfs/article-abstract/22/5/1915/1592901?redirectedFrom=fulltext)
 """,
    tags=['portfolio_construction_strategies', 'portfolio_optimization_strategies'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_equal_weighted(
    body: PortfolioOptimizationEqualWeightedPostRequest,
):
    """
    Equal Weighted Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/hierarchical-risk-parity',
    description=""" Compute the asset weights of the hierarchical risk parity portfolio, optionally subject to:  
* Minimum and maximum weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * [Lopez de Prado, M. (2016). Building diversified portfolios that outperform out-of-sample. Journal of Portfolio Management, 42(4), 59–69](https://jpm.pm-research.com/content/42/4/59)
 * [Johann Pfitzinger & Nico Katzke, 2019. A constrained hierarchical risk parity algorithm with cluster-based capital allocation. Working Papers 14/2019, Stellenbosch University, Department of Economics](https://ideas.repec.org/p/sza/wpaper/wpapers328.html)
 """,
    tags=['portfolio_optimization_strategies', 'portfolio_optimization_approaches'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_hierarchical_risk_parity(
    body: PortfolioOptimizationHierarchicalRiskParityPostRequest,
):
    """
    Hierarchical Risk Parity Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/hierarchical-risk-parity/clustering-based',
    description=""" Compute the asset weights of the hierarchical clustering-based risk parity portfolio, optionally subject to:  
* Minimum and maximum weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * [Machine Learning for Asset Management: New Developments and Financial Applications, Emmanuel Jurczenko, Chapter 9, Harald Lohre,Carsten Rother,Kilian Axel Schäfer, Hierarchical Risk Parity: Accounting for Tail Dependencies in Multi-asset Multi-factor Allocations](https://onlinelibrary.wiley.com/doi/10.1002/9781119751182.ch9)
 * [Thomas Raffinot, Hierarchical Clustering-Based Asset Allocation, The Journal of Portfolio Management Multi-Asset Special Issue 2018, 44 (2) 89-99](https://jpm.pm-research.com/content/44/2/89.abstract)
 * [Raffinot, Thomas, The Hierarchical Equal Risk Contribution Portfolio](https://ssrn.com/abstract=3237540)
 * [Johann Pfitzinger & Nico Katzke, 2019. A constrained hierarchical risk parity algorithm with cluster-based capital allocation. Working Papers 14/2019, Stellenbosch University, Department of Economics](https://ideas.repec.org/p/sza/wpaper/wpapers328.html)
 """,
    tags=[
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'portfolio_construction_strategies',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_hierarchical_risk_parity_portfolio(
    body: PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest,
):
    """
    Hierarchical Clustering-Based Risk Parity Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/inverse-variance-weighted',
    description=""" Compute the asset weights of the inverse variance-weighted portfolio.

References
 * [Raul Leote de Carvalho and al., Demystifying Equity Risk-Based Strategies: A Simple Alpha Plus Beta Description](https://doi.org/10.3905/jpm.2012.38.3.056)
 """,
    tags=['portfolio_optimization_strategies', 'portfolio_optimization_approaches'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_inverse_variance_weighted(
    body: PortfolioOptimizationInverseVarianceWeightedPostRequest,
):
    """
    Inverse Variance Weighted Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/inverse-volatility-weighted',
    description=""" Compute the asset weights of the inverse volatility-weighted portfolio.

References
 * [Raul Leote de Carvalho and al., Demystifying Equity Risk-Based Strategies: A Simple Alpha Plus Beta Description](https://doi.org/10.3905/jpm.2012.38.3.056)
 """,
    tags=['portfolio_optimization_strategies', 'portfolio_optimization_approaches'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_inverse_volatility_weighted(
    body: PortfolioOptimizationInverseVolatilityWeightedPostRequest,
):
    """
    Inverse Volatility Weighted Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/market-capitalization-weighted',
    description=""" Compute the asset weights of the market capitalization-weighted portfolio.

References
 * [Wikipedia, Capitalization-weighted Index](https://en.wikipedia.org/wiki/Capitalization-weighted_index)
 """,
    tags=['portfolio_optimization_approaches', 'portfolio_optimization_strategies'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_market_capitalization_weighted(
    body: PortfolioOptimizationMarketCapitalizationWeightedPostRequest,
):
    """
    Market Capitalization Weighted Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/maximum-decorrelation',
    description=""" Compute the asset weights of the maximum decorrelation portfolio, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * [F. Goltz, S. Sivasubramanian, Scientific Beta Maximum Decorrelation Indices](http://www.scientificbeta.com/download/file/scientific-beta-max-decorrelation-indices)
 """,
    tags=[
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'portfolio_construction_strategies',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_maximum_decorrelation(
    body: PortfolioOptimizationMaximumDecorrelationPostRequest,
):
    """
    Maximum Decorrelation Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/maximum-return',
    description=""" Compute the asset weights of the maximum return portfolio, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=[
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'portfolio_performance_metrics',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_maximum_return(
    body: PortfolioOptimizationMaximumReturnPostRequest,
):
    """
    Maximum Return Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/maximum-return/diversified',
    description=""" Compute the asset weights of the diversified maximum return portfolio, as defined in the first reference, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.

References
 * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
 * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=['portfolio_optimization_strategies', 'portfolio_optimization_approaches'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_maximum_return_diversified(
    body: PortfolioOptimizationMaximumReturnDiversifiedPostRequest,
):
    """
    Diversified Maximum Return Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/maximum-return/subset-resampling-based',
    description=""" Compute the asset weights of the subset resampling-based maximum return portfolio, following the methodology described in the first and the second references, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
 * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=[
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'subset_resampling_optimization',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def subset_resampling_max_return_portfolio(
    body: PortfolioOptimizationMaximumReturnSubsetResamplingBasedPostRequest,
):
    """
    Subset Resampling-Based Maximum Return Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/maximum-sharpe-ratio',
    description=""" Compute the asset weights of the maximum Sharpe ratio portfolio, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=[
        'portfolio_performance_metrics',
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'subset_resampling_optimization',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_maximum_sharpe_ratio(
    body: PortfolioOptimizationMaximumSharpeRatioPostRequest,
):
    """
    Maximum Sharpe Ratio Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/maximum-sharpe-ratio/diversified',
    description=""" Compute the asset weights of the diversified maximum Sharpe ratio portfolio, as defined in the first reference, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.

References
 * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
 * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=[
        'portfolio_performance_metrics',
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_maximum_sharpe_ratio_diversified(
    body: PortfolioOptimizationMaximumSharpeRatioDiversifiedPostRequest,
):
    """
    Diversified Maximum Sharpe Ratio Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/maximum-sharpe-ratio/subset-resampling-based',
    description=""" Compute the asset weights of the susbet resampling-based maximum Sharpe ratio portfolio, following the methodology described in the first and the second references, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
 * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=[
        'portfolio_performance_metrics',
        'portfolio_optimization_strategies',
        'subset_resampling_optimization',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def subset_resampling_max_sharpe_ratio_portfolio(
    body: PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest,
):
    """
    Subset Resampling-Based Maximum Sharpe Ratio Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/maximum-ulcer-performance-index',
    description=""" Compute the asset weights of the maximum Ulcer Performance Index portfolio, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

Notes:  
* This endpoint will return an error if the maximum Ulcer Performance Index portfolio has a negative Ulcer Performance Index

References
 * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
 * [A. Chekhlov, S. Uryasev, M. Zabarankin, Portfolio Optimization with Drawdown Constraints, Supply Chain and Finance, p 209-228](https://doi.org/10.1142/9789812562586_0013)
 * [A. Chekhlov, S. Uryasev, M. Zabarankin, Drawdown Measure in Portfolio Optimization, International Journal of Theoretical and Applied FinanceVol. 08, No. 01, pp. 13-58 (2005)](https://www.worldscientific.com/doi/10.1142/S0219024905002767)
 """,
    tags=[
        'portfolio_performance_metrics',
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_maximum_ulcer_performance_index(
    body: PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest,
):
    """
    Maximum Ulcer Performance Index Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/mean-variance-efficient',
    description=""" Compute the asset weights of a mean-variance efficient portfolio, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

> A mean-variance efficient portfolio is a portfolio belonging to [the mean-variance efficient frontier](#post-/portfolio/analysis/mean-variance/efficient-frontier).

References
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=[
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'subset_resampling_optimization',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_mean_variance_efficient(
    body: PortfolioOptimizationMeanVarianceEfficientPostRequest,
):
    """
    Mean-Variance Efficient Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/mean-variance-efficient/diversified',
    description=""" Compute the asset weights of a diversified mean-variance efficient portfolio, as defined in the first reference, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.

> A diversified mean-variance efficient portfolio does NOT belong to [the mean-variance efficient frontier](#post-/portfolio/analysis/mean-variance/efficient-frontier), but is close to this frontier.

References
 * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
 * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=[
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'portfolio_performance_metrics',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_mean_variance_efficient_diversified(
    body: PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequest,
):
    """
    Diversified Mean-Variance Efficient Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/mean-variance-efficient/subset-resampling-based',
    description=""" Compute the asset weights of a subset resampling-based  mean-variance efficient portfolio, following the methodology described in the first and the second references, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
 * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=[
        'portfolio_optimization_strategies',
        'subset_resampling_optimization',
        'portfolio_construction_strategies',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def subset_resampling_mean_variance_portfolio_optimizer(
    body: PortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedPostRequest,
):
    """
    Subset Resampling-Based Mean-Variance Efficient Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/minimum-correlation',
    description=""" Compute the asset weights of the (heuristic) minimum correlation portfolio, which is a portfolio built using the Minimum Correlation Algorithm discovered by [David Varadi](https://cssanalytics.wordpress.com/).

References
 * [CSSA, Minimum Correlation Algorithm Paper Release](https://cssanalytics.wordpress.com/2012/09/21/minimum-correlation-algorithm-paper-release/)
 """,
    tags=[
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'correlation_covariance_analysis',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_minimum_correlation(
    body: PortfolioOptimizationMinimumCorrelationPostRequest,
):
    """
    Minimum Correlation Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/minimum-ulcer-index',
    description=""" Compute the asset weights of the minimum Ulcer Index portfolio, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
 * [A. Chekhlov, S. Uryasev, M. Zabarankin, Portfolio Optimization with Drawdown Constraints, Supply Chain and Finance, p 209-228](https://doi.org/10.1142/9789812562586_0013)
 * [A. Chekhlov, S. Uryasev, M. Zabarankin, Drawdown Measure in Portfolio Optimization, International Journal of Theoretical and Applied FinanceVol. 08, No. 01, pp. 13-58 (2005)](https://www.worldscientific.com/doi/10.1142/S0219024905002767)
 """,
    tags=[
        'portfolio_performance_metrics',
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_minimum_ulcer_index(
    body: PortfolioOptimizationMinimumUlcerIndexPostRequest,
):
    """
    Minimum Ulcer Index Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/minimum-variance',
    description=""" Compute the asset weights of the minimum variance portfolio, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=['portfolio_optimization_strategies', 'portfolio_optimization_approaches'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_minimum_variance(
    body: PortfolioOptimizationMinimumVariancePostRequest,
):
    """
    Minimum Variance Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/minimum-variance/diversified',
    description=""" Compute the asset weights of the diversified minimum variance portfolio, as defined in the first reference, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.

References
 * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
 * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=['portfolio_optimization_strategies', 'portfolio_optimization_approaches'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_minimum_variance_diversified(
    body: PortfolioOptimizationMinimumVarianceDiversifiedPostRequest,
):
    """
    Diversified Minimum Variance Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/minimum-variance/subset-resampling-based',
    description=""" Compute the asset weights of the subset resampling-based minimum variance portfolio, following the methodology described in the first and the second references, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
 * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
 * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
 """,
    tags=[
        'portfolio_optimization_strategies',
        'subset_resampling_optimization',
        'portfolio_construction_strategies',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def subset_resampling_minimum_variance_portfolio(
    body: PortfolioOptimizationMinimumVarianceSubsetResamplingBasedPostRequest,
):
    """
    Subset Resampling-Based Minimum Variance Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/optimization/most-diversified',
    description=""" Compute the asset weights of the most diversified portfolio, optionally subject to:  
* Minimum and maximum weights constraints
* Maximum group weights constraints
* Minimum and maximum portfolio exposure constraints

References
 * [Yves Choueifaty and Yves Coignard, Toward Maximum Diversification, The Journal of Portfolio Management Fall 2008, 35 (1) 40-51](https://doi.org/10.3905/JPM.2008.35.1.40)
 """,
    tags=[
        'portfolio_optimization_strategies',
        'portfolio_optimization_approaches',
        'portfolio_construction_strategies',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_optimization_most_diversified(
    body: PortfolioOptimizationMostDiversifiedPostRequest,
):
    """
    Most Diversified Portfolio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/simulation/rebalancing/drift-weight',
    description=""" Simulate the evolution of one or several portfolio(s) over one or several time period(s), the portfolio(s) being never rebalanced (a.k.a. buy and hold).

References
* [Hillion, Pierre, The Ex-Ante Rebalancing Premium (March 11, 2016). INSEAD Working Paper No. 2016/15/FIN](https://ssrn.com/abstract=2746471)
 """,
    tags=['portfolio_rebalancing_simulations', 'portfolio_optimization_strategies'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_simulation_rebalancing_drift_weight(
    body: PortfolioSimulationRebalancingDriftWeightPostRequest,
):
    """
    Drift-weight Portfolio Rebalancing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/simulation/rebalancing/fixed-weight',
    description=""" Simulate the evolution of one or several portfolio(s) over one or several time period(s), the portfolio(s) being rebalanced toward fixed weights at the beginning of each time period.

References
* [Hillion, Pierre, The Ex-Ante Rebalancing Premium (March 11, 2016). INSEAD Working Paper No. 2016/15/FIN](https://ssrn.com/abstract=2746471)        
 """,
    tags=['portfolio_rebalancing_simulations', 'portfolio_construction_strategies'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_simulation_rebalancing_fixed_weight(
    body: PortfolioSimulationRebalancingFixedWeightPostRequest,
):
    """
    Fixed-weight Portfolio Rebalancing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/portfolio/simulation/rebalancing/random-weight',
    description=""" Simulate the evolution of one or several portfolio(s) over one or several time period(s), the portfolio(s) being rebalanced toward random weights at the beginning of each time period.

References
* [R Stein, Not fooled by randomness: Using random portfolios to analyse investment funds, Investment Analysts Journal, 43:79, 1-15, DOI: 10.1080/10293523.2014.11082564](https://www.tandfonline.com/doi/abs/10.1080/10293523.2014.11082564)
 """,
    tags=['portfolio_rebalancing_simulations', 'portfolio_construction_strategies'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_portfolio_simulation_rebalancing_random_weight(
    body: PortfolioSimulationRebalancingRandomWeightPostRequest,
):
    """
    Random-weight Portfolio Rebalancing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
